Expect valid jsdoc-block definition at Scripts/Controller/Controller.js :
    23 |    OdysseyController.CONTROL_OVERLAY_CLICK = 0;
    24 |
    25 |    OdysseyController.prototype.setControlManager = function (controlManager) {
------------------------------------------------------------^
    26 |        this.controlManager = controlManager;
    27 |    };

Expect valid jsdoc-block definition at Scripts/Controller/Controller.js :
    26 |        this.controlManager = controlManager;
    27 |    };
    28 |    OdysseyController.prototype.setContext = function (Odyssey) {
-----------------------------------------------------^
    29 |        this.context = Odyssey;
    30 |    };

Expect valid jsdoc-block definition at Scripts/Controller/Controller.js :
    29 |        this.context = Odyssey;
    30 |    };
    31 |    OdysseyController.prototype.disable = function (controlID) {
--------------------------------------------------^
    32 |        this.controlStates[controlID] = false;
    33 |    };

Expect valid jsdoc-block definition at Scripts/Controller/Controller.js :
    32 |        this.controlStates[controlID] = false;
    33 |    };
    34 |    OdysseyController.prototype.enable = function (controlID) {
-------------------------------------------------^
    35 |        this.controlStates[controlID] = true;
    36 |    };

Expect valid jsdoc-block definition at Scripts/Controller/Controller.js :
    35 |        this.controlStates[controlID] = true;
    36 |    };
    37 |    OdysseyController.prototype.isDisabled = function (controlID) {
-----------------------------------------------------^
    38 |        return (this.controlStates[controlID] === false);
    39 |    };

Expect valid jsdoc-block definition at Scripts/Controller/Controller.js :
    38 |        return (this.controlStates[controlID] === false);
    39 |    };
    40 |    OdysseyController.prototype.isEnabled = function (controlID) {
----------------------------------------------------^
    41 |        // Controls are enabled by default.
    42 |        return (!this.isDisabled(controlID));

Expect valid jsdoc-block definition at Scripts/Controller/Controller.js :
    42 |        return (!this.isDisabled(controlID));
    43 |    };
    44 |    OdysseyController.prototype.initialize = function () {
-----------------------------------------------------^
    45 |        var ctx = this;
    46 |        // Initialize the canvas selection.

Expect valid jsdoc-block definition at Scripts/Controller/Controller.js :
    45 |        var ctx = this;
    46 |        // Initialize the canvas selection.
    47 |        function dispatchControl() {
----------------^
    48 |            ctx.handleControlOverlayClick();
    49 |        }

Expect valid jsdoc-block definition at Scripts/Controller/ControllerAttributor.js :
     2 |Odyssey.Controller.ControllerAttributor = (function () {
     3 |    "use strict";
     4 |    function OdysseyControllerAttributor() {}
------------^
     5 |    /**
     6 |     * Sets the controller. This object should contain methods to bind controls.

Expect valid jsdoc-block definition at Scripts/Controller/ControlManager.js :
     8 |Odyssey.Controller.ControlManager = (function () {
     9 |    "use strict";
    10 |    function OdysseyControlManager() {
------------^
    11 |        this.eventDispatcher = new Odyssey.Events.EventDispatcher();
    12 |        this.controls = [];

Expect valid jsdoc-block definition at Scripts/Controller/ControlManager.js :
    17 |    extend(OdysseyControlManager.prototype, new Odyssey.Controller.ControllerAttributor());
    18 |
    19 |    OdysseyControlManager.prototype.addControl = function (control) {
---------------------------------------------------------^
    20 |        this.controls.push(control);
    21 |        control.setParentEventHandler(this.eventDispatcher);

Illegal trailing whitespace at Scripts/Controller/LinkClickControl.js :
    72 |     * Creates a proxy to handle clicks.
    73 |     * @param {OdysseyLinkClickControl} ctx the link control.
    74 |     * @returns {Function} the 
---------------------------------------^
    75 |     */
    76 |    OdysseyLinkClickControl.handleClickProxy = function (ctx) {

Expected indentation of 4 characters at Scripts/Controller/MapSearch.js :
    18 |    var handlers = {};
    19 |
    20 | /**
------------^
    21 |  * Listens to messages from the server.
    22 |     * @TODO does not seem to be used.

Unavailable tag TODO at Scripts/Controller/MapSearch.js :
    20 | /**
    21 |  * Listens to messages from the server.
    22 |     * @TODO does not seem to be used.
------------^
    23 |     * @TODO : CLEANUP : do we use this method or OdysseyMapSearch.worker.onmessage ?
    24 |     * @param {Object} e the message event.

Unavailable tag TODO at Scripts/Controller/MapSearch.js :
    21 |  * Listens to messages from the server.
    22 |     * @TODO does not seem to be used.
    23 |     * @TODO : CLEANUP : do we use this method or OdysseyMapSearch.worker.onmessage ?
------------^
    24 |     * @param {Object} e the message event.
    25 |  */

Expect valid jsdoc-block definition at Scripts/Controller/MapSearch.js :
    24 |     * @param {Object} e the message event.
    25 |  */
    26 |    window.onmessage = function handleMessage(e) {
-------------------------------^
    27 |        var id, type, data;
    28 |        if (e.hasOwnProperty('id')) {

Expected o but got the at Scripts/Controller/MapSearch.js :
   140 |    /**
   141 |     * Creates a find request.
   142 |     * @param {Object} the data to use.
-------------------------------^
   143 |     * @param {Function} fnFind the callback to use when an item is found.
   144 |     * @param {Function} fnComplete the callback to use when the search is complete.

Expect valid jsdoc-block definition at Scripts/Controller/NavigationControl.js :
   128 |    };
   129 |
   130 |    OdysseyNavigationControl.prototype.initialize = function () {
------------------------------------------------------------^
   131 |        var ctx = this,
   132 |            $body = $(document.body),

Expect valid jsdoc-block definition at Scripts/Controller/NavigationMenuControl.js :
     7 |Odyssey.Controller.NavigationMenuControl = (function ($) {
     8 |    "use strict";
     9 |    function OdysseyNavigationMenuControl() {
------------^
    10 |        this.eventDispatcher = new Odyssey.Events.EventDispatcher();
    11 |    }

Expect valid jsdoc-block definition at Scripts/Controller/NavigationMenuControl.js :
    14 |    extend(OdysseyNavigationMenuControl.prototype, new Odyssey.Model.ModelAttributor());
    15 |
    16 |    OdysseyNavigationMenuControl.prototype.initialize = function () {
----------------------------------------------------------------^
    17 |        // TODO REPLACE
    18 |        var ctx = this;

Missing line feed at file end at Scripts/Controller/NavigationMenuControl.js :
    23 |
    24 |    return OdysseyNavigationMenuControl;
    25 |}(jQuery));
-------------------^

Expect valid jsdoc-block definition at Scripts/Controller/OverlayControl.js :
    18 |        SOUTHEAST = Odyssey.View.CanvasInterface.CANVAS_SOUTHEAST_ID;
    19 |
    20 |    function OdysseyOverlayControl() {
------------^
    21 |        this.eventDispatcher = new Odyssey.Events.EventDispatcher();
    22 |    }

Expect valid jsdoc-block definition at Scripts/Controller/OverlayControl.js :
    61 |    };
    62 |
    63 |    OdysseyOverlayControl.prototype.initialize = function () {
---------------------------------------------------------^
    64 |        var tileMap = this.getView().getTileMap(),
    65 |            overlay = this.getView().getOverlay();

Expect valid jsdoc-block definition at Scripts/Controller/Search.Worker.js :
     9 |
    10 |    /* Utility functions */
    11 |    function extend(a, b) {
------------^
    12 |        var p;
    13 |        for (p in b) {

Expect valid jsdoc-block definition at Scripts/Controller/Search.Worker.js :
    19 |    }
    20 |
    21 |    function OdysseySearchResult() {
------------^
    22 |        this.position = {};
    23 |        this.items = [];

Expect valid jsdoc-block definition at Scripts/Controller/Search.Worker.js :
    24 |        this.creatures = [];
    25 |    }
    26 |    OdysseySearchResult.prototype.setPosition = function (o) {
--------------------------------------------------------^
    27 |        this.position.x = o.x;
    28 |        this.position.y = o.y;

Expect valid jsdoc-block definition at Scripts/Controller/Search.Worker.js :
    29 |        this.position.z = o.z;
    30 |    };
    31 |    OdysseySearchResult.prototype.setItems = function (items) {
-----------------------------------------------------^
    32 |        Array.prototype.push.apply(this.items, items);
    33 |    };

Expect valid jsdoc-block definition at Scripts/Controller/Search.Worker.js :
    32 |        Array.prototype.push.apply(this.items, items);
    33 |    };
    34 |    OdysseySearchResult.prototype.setCreatures = function (creatures) {
---------------------------------------------------------^
    35 |        Array.prototype.push.apply(this.creatures, creatures);
    36 |    };

Expect valid jsdoc-block definition at Scripts/Controller/Search.Worker.js :
    36 |    };
    37 |
    38 |    function setData(msg) {
------------^
    39 |        extend(savedMaps, msg.data);
    40 |    }

Expect valid jsdoc-block definition at Scripts/Controller/Search.Worker.js :
    40 |    }
    41 |
    42 |    function resolveOffset(x, y) {
------------^
    43 |        return (x + (y << 8));
    44 |    }

Expect valid jsdoc-block definition at Scripts/Controller/Search.Worker.js :
    44 |    }
    45 |
    46 |    function getTile(map, x, y) {
------------^
    47 |        var offset = resolveOffset(x, y);
    48 |

Expect valid jsdoc-block definition at Scripts/Controller/Search.Worker.js :
    50 |    }
    51 |
    52 |    function mapContainsItem(map, itemID) {
------------^
    53 |        return map.Items.indexOf(itemID) !== -1;
    54 |    }

Expect valid jsdoc-block definition at Scripts/Controller/Search.Worker.js :
    54 |    }
    55 |
    56 |    function mapContainsOneOfItem(map, itemIDs) {
------------^
    57 |        var i, len = itemIDs.length;
    58 |        for (i = 0; i < len; i += 1) {

Expect valid jsdoc-block definition at Scripts/Controller/Search.Worker.js :
    64 |    }
    65 |
    66 |    function tileContainsItem(tile, itemID) {
------------^
    67 |        var i, len;
    68 |        if (tile.hasOwnProperty('Items')) {

Expect valid jsdoc-block definition at Scripts/Controller/Search.Worker.js :
    78 |    }
    79 |
    80 |    function getTileAbsolutePosition(map, x, y) {
------------^
    81 |        return {
    82 |            x: map.BaseX + x,

Expect valid jsdoc-block definition at Scripts/Controller/Search.Worker.js :
    86 |    }
    87 |
    88 |    function tileContainsCreature(tile, creature) {
------------^
    89 |        if (tile.hasOwnProperty('creatures')) {
    90 |            return tile.creatures.indexOf(creature) !== -1;

Expect valid jsdoc-block definition at Scripts/Controller/Search.Worker.js :
    93 |    }
    94 |
    95 |    function searchMap(map, o) {
------------^
    96 |        var mapX, mapY, i, len, searchItems, searchCreatures, tile, results = [], itemsFound = [], creaturesFound = [], r;
    97 |        searchItems = (o && o.data && o.data.items) || [];

Expect valid jsdoc-block definition at Scripts/Controller/Search.Worker.js :
   142 |        }
   143 |    }
   144 |    function searchData(o) {
------------^
   145 |        var map, globalResultSet = [], result;
   146 |        for (map in savedMaps) {

Expect valid jsdoc-block definition at Scripts/Controller/Search.Worker.js :
   159 |    }
   160 |
   161 |    onmessage = function (e) {
------------------------^
   162 |        var msg = JSON.parse(e.data);
   163 |

Expect valid jsdoc-block definition at Scripts/Controller/Search.Worker.js :
   165 |        if (msg.action === 'search') {
   166 |            searchData(extend(msg, {
   167 |                onfind: function (result) {
--------------------------------^
   168 |                    var request = {
   169 |                        result: result,

Expect valid jsdoc-block definition at Scripts/Controller/Search.Worker.js :
   173 |                    postMessage(JSON.stringify(request));
   174 |                },
   175 |                oncomplete: function (results) {
------------------------------------^
   176 |                    var request = {
   177 |                        results: results,

Expect valid jsdoc-block definition at Scripts/Controller/WorldMapControl.js :
    12 |Odyssey.Controller.WorldMapControl = (function ($) {
    13 |    "use strict";
    14 |    function OdysseyWorldMapControl() {
------------^
    15 |        this.eventDispatcher = new Odyssey.Events.EventDispatcher();
    16 |        this.mouseIsDown = false;

Expect valid jsdoc-block definition at Scripts/Controller/WorldMapControl.js :
    20 |    extend(OdysseyWorldMapControl.prototype, new Odyssey.Model.ModelAttributor());
    21 |
    22 |    OdysseyWorldMapControl.prototype.processShowClick = function () {
----------------------------------------------------------------^
    23 |        this.getView().getWorldMap().show();
    24 |    };

Expect valid jsdoc-block definition at Scripts/Controller/WorldMapControl.js :
    24 |    };
    25 |
    26 |    OdysseyWorldMapControl.prototype.processHideClick = function () {
----------------------------------------------------------------^
    27 |        this.getView().getWorldMap().hide();
    28 |    };

Expect valid jsdoc-block definition at Scripts/Controller/WorldMapControl.js :
    28 |    };
    29 |
    30 |    OdysseyWorldMapControl.prototype.setPosition = function (x, y, z) {
-----------------------------------------------------------^
    31 |        this.getView().getWorldMap().setMapPosition(x, y, z);
    32 |    };

Expect valid jsdoc-block definition at Scripts/Controller/WorldMapControl.js :
    32 |    };
    33 |
    34 |    OdysseyWorldMapControl.prototype.initialize = function () {
----------------------------------------------------------^
    35 |        var ctx = this;
    36 |        $("#OdysseyOpenMinimap").click(function () {

Expected indentation of 8 characters at Scripts/Controller/WorldMapControl.js :
   105 |        }
   106 |
   107 |  // DOM events.
----------------^
   108 |  $(document.body).mouseup(handleDocumentMouseUpEvent);
   109 |  $(this.getView().getWorldMap().getMapViewportElement()).mousedown(handleViewportMouseDownEvent);

Expected indentation of 8 characters at Scripts/Controller/WorldMapControl.js :
   106 |
   107 |  // DOM events.
   108 |  $(document.body).mouseup(handleDocumentMouseUpEvent);
----------------^
   109 |  $(this.getView().getWorldMap().getMapViewportElement()).mousedown(handleViewportMouseDownEvent);
   110 |  $(this.getView().getWorldMap().getMapViewportElement()).mousemove(handleViewportMouseMoveEvent);

Expected indentation of 8 characters at Scripts/Controller/WorldMapControl.js :
   107 |  // DOM events.
   108 |  $(document.body).mouseup(handleDocumentMouseUpEvent);
   109 |  $(this.getView().getWorldMap().getMapViewportElement()).mousedown(handleViewportMouseDownEvent);
----------------^
   110 |  $(this.getView().getWorldMap().getMapViewportElement()).mousemove(handleViewportMouseMoveEvent);
   111 |  $(this.getView().getWorldMap().getMapViewportElement()).on('touch', handleViewportTouchMoveEvent);

Expected indentation of 8 characters at Scripts/Controller/WorldMapControl.js :
   108 |  $(document.body).mouseup(handleDocumentMouseUpEvent);
   109 |  $(this.getView().getWorldMap().getMapViewportElement()).mousedown(handleViewportMouseDownEvent);
   110 |  $(this.getView().getWorldMap().getMapViewportElement()).mousemove(handleViewportMouseMoveEvent);
----------------^
   111 |  $(this.getView().getWorldMap().getMapViewportElement()).on('touch', handleViewportTouchMoveEvent);
   112 |  this.getView().getWorldMap().addEventListener('OdysseyWorldMapClose', function () {

Expected indentation of 8 characters at Scripts/Controller/WorldMapControl.js :
   109 |  $(this.getView().getWorldMap().getMapViewportElement()).mousedown(handleViewportMouseDownEvent);
   110 |  $(this.getView().getWorldMap().getMapViewportElement()).mousemove(handleViewportMouseMoveEvent);
   111 |  $(this.getView().getWorldMap().getMapViewportElement()).on('touch', handleViewportTouchMoveEvent);
----------------^
   112 |  this.getView().getWorldMap().addEventListener('OdysseyWorldMapClose', function () {
   113 |   // Update the map position to reflect the WorldMap position.

Expected indentation of 8 characters at Scripts/Controller/WorldMapControl.js :
   110 |  $(this.getView().getWorldMap().getMapViewportElement()).mousemove(handleViewportMouseMoveEvent);
   111 |  $(this.getView().getWorldMap().getMapViewportElement()).on('touch', handleViewportTouchMoveEvent);
   112 |  this.getView().getWorldMap().addEventListener('OdysseyWorldMapClose', function () {
----------------^
   113 |   // Update the map position to reflect the WorldMap position.
   114 |   var pos = this.getView().getWorldMap().getMapPosition();

Expected indentation of 12 characters at Scripts/Controller/WorldMapControl.js :
   111 |  $(this.getView().getWorldMap().getMapViewportElement()).on('touch', handleViewportTouchMoveEvent);
   112 |  this.getView().getWorldMap().addEventListener('OdysseyWorldMapClose', function () {
   113 |   // Update the map position to reflect the WorldMap position.
--------------------^
   114 |   var pos = this.getView().getWorldMap().getMapPosition();
   115 |   this.getView().getTileMap().setPosition(pos.x, pos.y, pos.z);

Expected indentation of 12 characters at Scripts/Controller/WorldMapControl.js :
   112 |  this.getView().getWorldMap().addEventListener('OdysseyWorldMapClose', function () {
   113 |   // Update the map position to reflect the WorldMap position.
   114 |   var pos = this.getView().getWorldMap().getMapPosition();
--------------------^
   115 |   this.getView().getTileMap().setPosition(pos.x, pos.y, pos.z);
   116 |  });

Expected indentation of 12 characters at Scripts/Controller/WorldMapControl.js :
   113 |   // Update the map position to reflect the WorldMap position.
   114 |   var pos = this.getView().getWorldMap().getMapPosition();
   115 |   this.getView().getTileMap().setPosition(pos.x, pos.y, pos.z);
--------------------^
   116 |  });
   117 |    };

Expected indentation of 8 characters at Scripts/Controller/WorldMapControl.js :
   114 |   var pos = this.getView().getWorldMap().getMapPosition();
   115 |   this.getView().getTileMap().setPosition(pos.x, pos.y, pos.z);
   116 |  });
----------------^
   117 |    };
   118 |

Expect valid jsdoc-block definition at Scripts/Events/BinaryFileErrorEvent.js :
     4 |Odyssey.Events.BinaryFileErrorEvent = (function () {
     5 |    "use strict";
     6 |    function OdysseyBinaryFileErrorEvent(context) {
------------^
     7 |        this.file = context;
     8 |    }

Expect valid jsdoc-block definition at Scripts/Events/BinaryFileLoadedEvent.js :
     5 |Odyssey.Events.BinaryFileLoadedEvent = (function () {
     6 |    "use strict";
     7 |    function OdysseyBinaryFileLoadedEvent(context) {
------------^
     8 |        this.file = context;
     9 |    }

Expect valid jsdoc-block definition at Scripts/Events/CanvasTranslatedEvent.js :
     4 |Odyssey.Events.CanvasTranslatedEvent = (function () {
     5 |    "use strict";
     6 |    function OdysseyCanvasTranslatedEvent() {}
------------^
     7 |    extend(OdysseyCanvasTranslatedEvent.prototype, new Odyssey.Events.Event("CanvasTranslatedEvent"));
     8 |

Missing line feed at file end at Scripts/Events/CanvasTranslatedEvent.js :
     8 |
     9 |    return OdysseyCanvasTranslatedEvent;
    10 |}());
-------------^

Expect valid jsdoc-block definition at Scripts/Events/Event.js :
    12 |    }
    13 |    OdysseyEvent.prototype.propagationStopped = false;
    14 |    OdysseyEvent.prototype.stopPropagation = function () {
-----------------------------------------------------^
    15 |        this.propagationStopped = true;
    16 |    };

Expect valid jsdoc-block definition at Scripts/Events/Event.js :
    16 |    };
    17 |    OdysseyEvent.prototype.defaultPrevented = false;
    18 |    OdysseyEvent.prototype.preventDefault = function () {
----------------------------------------------------^
    19 |        this.defaultPrevented = true;
    20 |    };

Expect valid jsdoc-block definition at Scripts/Events/EventDispatcher.js :
    10 |        this.events = {};
    11 |    }
    12 |    OdysseyEventDispatcher.prototype.toJSON = function () {
------------------------------------------------------^
    13 |        // Do not serialize this object, as it is a container for functions.
    14 |        return;

Expect valid jsdoc-block definition at Scripts/Events/EventDispatcher.js :
    15 |    };
    16 |    OdysseyEventDispatcher.prototype.parent = null;
    17 |    OdysseyEventDispatcher.prototype.getParentEventHandler = function () {
---------------------------------------------------------------------^
    18 |        return this.parent;
    19 |    };

Expect valid jsdoc-block definition at Scripts/Events/EventDispatcher.js :
    18 |        return this.parent;
    19 |    };
    20 |    OdysseyEventDispatcher.prototype.setParentEventHandler = function (parent) {
---------------------------------------------------------------------^
    21 |        this.parent = parent;
    22 |    };

Expect valid jsdoc-block definition at Scripts/Events/EventDispatcher.js :
    21 |        this.parent = parent;
    22 |    };
    23 |    OdysseyEventDispatcher.prototype.getEventHandler = function (type) {
---------------------------------------------------------------^
    24 |        if (!this.events.hasOwnProperty(type)) {
    25 |            this.events[type] = new Odyssey.Events.EventHandler(type);

Expect valid jsdoc-block definition at Scripts/Events/EventDispatcher.js :
    28 |    };
    29 |
    30 |    OdysseyEventDispatcher.prototype.dispatch = function (ctx, e) {
--------------------------------------------------------^
    31 |        var handler = this.getEventHandler(e.type), parent;
    32 |        handler.fire(ctx, e);

Expect valid jsdoc-block definition at Scripts/Events/EventDispatcher.js :
    40 |    };
    41 |
    42 |    OdysseyEventDispatcher.prototype.addListener = function (type, fn) {
-----------------------------------------------------------^
    43 |        var handler = this.getEventHandler(type);
    44 |        handler.addListener(fn);

Expect valid jsdoc-block definition at Scripts/Events/EventDispatcher.js :
    45 |    };
    46 |
    47 |    OdysseyEventDispatcher.prototype.removeListener = function (type, fn) {
--------------------------------------------------------------^
    48 |        var handler = this.getEventHandler(type);
    49 |        handler.removeListener(fn);

Expect valid jsdoc-block definition at Scripts/Events/EventHandler.js :
     2 |Odyssey.Events.EventHandler = (function () {
     3 |    "use strict";
     4 |    function OdysseyEventHandler(type) {
------------^
     5 |        this.type = type;
     6 |        this.listeners = [];

Expect valid jsdoc-block definition at Scripts/Events/EventHandler.js :
     6 |        this.listeners = [];
     7 |    }
     8 |    OdysseyEventHandler.prototype.fire = function (ctx, e) {
-------------------------------------------------^
     9 |        var i, len = this.listeners.length;
    10 |        for (i = 0; (i < len && !e.propagationStopped); i += 1) {

Expect valid jsdoc-block definition at Scripts/Events/EventHandler.js :
    13 |    };
    14 |
    15 |    OdysseyEventHandler.prototype.addListener = function (fn) {
--------------------------------------------------------^
    16 |        this.listeners.push(fn);
    17 |    };

Expect valid jsdoc-block definition at Scripts/Events/EventHandler.js :
    17 |    };
    18 |
    19 |    OdysseyEventHandler.prototype.removeListener = function (fn) {
-----------------------------------------------------------^
    20 |        var index = this.listeners.indexOf(fn), len;
    21 |        if (index !== -1) {

Expect valid jsdoc-block definition at Scripts/Events/LinkClickEvent.js :
     5 |Odyssey.Events.LinkClickEvent = (function () {
     6 |    "use strict";
     7 |    function OdysseyLinkClickEvent(x, y, z) {
------------^
     8 |        this.x = x;
     9 |        this.y = y;

Expect valid jsdoc-block definition at Scripts/Events/ResourceManagerCompleteEvent.js :
     5 |Odyssey.Events.ResourceManagerCompleteEvent = (function () {
     6 |    "use strict";
     7 |    function OdysseyResourceManagerCompleteEvent() {}
------------^
     8 |    extend(OdysseyResourceManagerCompleteEvent.prototype, new Odyssey.Events.Event("OdysseyResourceManagerComplete"));
     9 |

Expect valid jsdoc-block definition at Scripts/Events/SpriteIndexLoadedEvent.js :
     5 |Odyssey.Events.SpriteIndexLoadedEvent = (function () {
     6 |    "use strict";
     7 |    function OdysseySpriteIndexLoadedEvent() {}
------------^
     8 |    extend(OdysseySpriteIndexLoadedEvent.prototype, new Odyssey.Events.Event('OdysseySpriteIndexLoaded'));
     9 |

Expect valid jsdoc-block definition at Scripts/Events/WorldMapHideEvent.js :
     5 |Odyssey.Events.WorldMapHideEvent = (function () {
     6 |    "use strict";
     7 |    function OdysseyWorldMapHideEvent() {}
------------^
     8 |    extend(OdysseyWorldMapHideEvent.prototype, new Odyssey.Events.Event('OdysseyWorldMapHide'));
     9 |

Expect valid jsdoc-block definition at Scripts/Events/WorldMapShowEvent.js :
     5 |Odyssey.Events.WorldMapShowEvent = (function () {
     6 |    "use strict";
     7 |    function OdysseyWorldMapShowEvent() {}
------------^
     8 |    extend(OdysseyWorldMapShowEvent.prototype, new Odyssey.Events.Event('OdysseyWorldMapShow'));
     9 |

Expect valid jsdoc-block definition at Scripts/Events/WorldMapToggleEvent.js :
     5 |Odyssey.Events.WorldMapToggleEvent = (function () {
     6 |    "use strict";
     7 |    function OdysseyWorldMapToggleEvent() {}
------------^
     8 |    extend(OdysseyWorldMapToggleEvent.prototype, new Odyssey.Events.Event('OdysseyWorldMapToggle'));
     9 |

Expect valid jsdoc-block definition at Scripts/Generics/Helper.js :
    22 |    };
    23 |
    24 |    ctx.count = window.count = function count(arr, val) {
---------------------------------------^
    25 |        var cnt = 0, i, len = arr.length;
    26 |        for (i = 0; i < len; i += 1) {

Expect valid jsdoc-block definition at Scripts/Generics/Helper.js :
    32 |    };
    33 |
    34 |    ctx.extend = window.extend = function (proto) {
-----------------------------------------^
    35 |        var k, i, o;
    36 |        for (i = arguments.length - 1; i > 0; i -= 1) {

Expect valid jsdoc-block definition at Scripts/Generics/ResourceManager.js :
    26 |
    27 |        // Getter for private fileUID.
    28 |        this.getUniqueFileID = function () {
---------------------------------------^
    29 |            var id = fileUID;
    30 |            fileUID += 1;

Unavailable tag TODO at Scripts/Generics/ResourceManager.js :
   139 |     * Gets the resource with the given ID.
   140 |     * @param {Number} index the resource's ID.
   141 |     * @TODO what does this return? ResourceManagerFile?
---------------^
   142 |     */
   143 |    ResourceManager.prototype.getResource = function (index) {

Unavailable tag TODO at Scripts/Generics/ResourceManager.js :
   244 |     * @param {Number} id the resource ID to check.
   245 |     * @returns {Boolean} true if the resource is awaiting load; false otherwise.
   246 |     * @TODO this is not true, returns true if it's already loaded.
---------------^
   247 |     */
   248 |    ResourceManager.prototype.isAwaitingLoad = function (id) {

Unavailable tag TODO at Scripts/Generics/ResourceManager.js :
   264 |    /**
   265 |     * Filters out resources not awaiting load.
   266 |     * @TODO
---------------^
   267 |     */
   268 |    ResourceManager.prototype.filterAwaiting = function () {

Function is missing documentation for parameter `a`. at Scripts/Generics/ResourceManager.js :
   298 |         * @returns {Number} negative if the two items should be swapped; positive otherwise.
   299 |         */
   300 |        function sorter(a, b) {
----------------^
   301 |            return (map[a] || 0) - (map[b] || 0);
   302 |        }

Function is missing documentation for parameter `b`. at Scripts/Generics/ResourceManager.js :
   298 |         * @returns {Number} negative if the two items should be swapped; positive otherwise.
   299 |         */
   300 |        function sorter(a, b) {
----------------^
   301 |            return (map[a] || 0) - (map[b] || 0);
   302 |        }

Function is missing documentation for parameter `filename`. at Scripts/Generics/ResourceManager.js :
   455 |     * @returns {Number} the resource ID of the resource identified by the filename.
   456 |     */
   457 |    ResourceManager.prototype.getResourceIDByFilename = function (filename) {
----------------------------------------------------------------^
   458 |        return this.getResourceIDByFilenameWithPrefix(this.prefix + filename);
   459 |    };

Function is missing documentation for parameter `filename`. at Scripts/Generics/ResourceManager.js :
   463 |     * @returns {Number} the resource ID of the resource identified by the filename.
   464 |     */
   465 |    ResourceManager.prototype.getResourceIDByFilenameWithPrefix = function (filename) {
--------------------------------------------------------------------------^
   466 |        if (!this.hasFileWithPrefix(filename)) {
   467 |            throw new Error("Resource " + filename + " does not exist.");

Function is missing documentation for parameter `filename`. at Scripts/Generics/ResourceManager.js :
   474 |     * @returns {Boolean} true if the file with this name exists; false otherwise.
   475 |     */
   476 |    ResourceManager.prototype.hasFile = function (filename) {
------------------------------------------------^
   477 |        return this.hasFileWithPrefix(this.prefix + filename);
   478 |    };

Function is missing documentation for parameter `filename`. at Scripts/Generics/ResourceManager.js :
   482 |     * @returns {Boolean} true if the file with this name exists; false otherwise.
   483 |     */
   484 |    ResourceManager.prototype.hasFileWithPrefix = function (filename) {
----------------------------------------------------------^
   485 |        return this.srcs.hasOwnProperty(filename);
   486 |    };

Illegal trailing whitespace at Scripts/Main.js :
   229 |            //tileMap.setPosition(32255, 32648, 13);
   230 |            tileMap.setPosition(32367, 32615, 7);
   231 |            
--------------------^
   232 |            view.addEventListener("OdysseyWorldMapHide", function () {
   233 |                var pos = this.getMapPosition();

Function is missing documentation for parameter `e`. at Scripts/Main.js :
   268 |             * Updates the overlay's position when the TileMap position changes.
   269 |             */
   270 |            function handlePositionChange(e) {
--------------------^
   271 |                overlay.setPosition(e.position.x, e.position.y, e.position.z);
   272 |                overlay.translate();

Unavailable tag TODO at Scripts/Main.js :
   311 |            /**
   312 |             * Updates the progress bar in response to core files being loaded.
   313 |             * @TODO implement
-----------------------^
   314 |             */
   315 |            function updateProgressBarLoadingCore() {

Expected obj but got the at Scripts/Model/Dat.js :
   195 |        /**
   196 |         * Handles the successful loading of the Dat.
   197 |         * @param {Object} the response from the AJAX request
-----------------------------------^
   198 |         * containing the Dat's data.
   199 |         */

Expected resourceManager but got the at Scripts/Model/MapIndex.js :
    43 |     * Adds the map index data to the resource manager so that
    44 |     * the resource manager knows which resources are valid.
    45 |     * @param {ResourceManager} the resource manager to add to.
----------------------------------------^
    46 |     */
    47 |    OdysseyMapIndex.prototype.addToResourceManager = function (resourceManager) {

Unavailable tag constructor. at Scripts/Model/Model.js :
    15 |    /**
    16 |     * Creates a model for the web application.
    17 |     * @constructor.
---------------^
    18 |     */
    19 |    function OdysseyModel() {

Wrong returns value at Scripts/Model/World.js :
    41 |            return this[x][y][z];
    42 |        }
    43 |        return null;
-----------------------^
    44 |    };
    45 |

Expect valid jsdoc-block definition at Scripts/View/CanvasInterface.js :
     9 |Odyssey.View.CanvasInterface = (function () {
    10 |    "use strict";
    11 |    function OdysseyCanvasInterface() {
------------^
    12 |        // This should NOT provide its own event dispatcher. Child classes MUST.
    13 |        this.eventDispatcher = null;

Expected x but got sx at Scripts/View/CanvasInterface.js :
   113 |     * corresponding to 32 times the size of the tile map,
   114 |     * plus 32x32 to resolve clipping for 64x64px sprites.
   115 |     * @param {Number} sx the amount of tiles in the X direction on the viewport and each canvas.
-------------------------------^
   116 |     * @param {Number} sy the amount of tiles in the Y direction on the viewport and each canvas.
   117 |     */

Expected y but got sy at Scripts/View/CanvasInterface.js :
   114 |     * plus 32x32 to resolve clipping for 64x64px sprites.
   115 |     * @param {Number} sx the amount of tiles in the X direction on the viewport and each canvas.
   116 |     * @param {Number} sy the amount of tiles in the Y direction on the viewport and each canvas.
-------------------------------^
   117 |     */
   118 |    OdysseyCanvasInterface.prototype.setSize = function (x, y) {

Expected id but got index at Scripts/View/CanvasInterface.js :
   123 |    /**
   124 |     * Sets a canvas for rendering the map.
   125 |     * @param {Number} index the index of the canvas.
-------------------------------^
   126 |     * @param {Object} canvas the DOM canvas element.
   127 |     */

Expected id but got index at Scripts/View/CanvasInterface.js :
   132 |    /**
   133 |     * Gets the canvas at the specified index.
   134 |     * @param {Number} index the index of the canvas to get.
-------------------------------^
   135 |     * @returns {Object} the canvas corresponding to the name.
   136 |     */

Function is missing documentation for parameter `canvases`. at Scripts/View/CanvasInterface.js :
   248 |     * have correct IDs after performing translations.
   249 |     */
   250 |    OdysseyCanvasInterface.prototype.updateCanvasIDs = function (canvases) {
---------------------------------------------------------------^
   251 |        canvases[OdysseyCanvasInterface.CANVAS_NORTHWEST_ID].setAttribute('id', 'OdysseyMapCanvas-NW');
   252 |        canvases[OdysseyCanvasInterface.CANVAS_NORTH_ID].setAttribute('id', 'OdysseyMapCanvas-N');

Missing line feed at file end at Scripts/View/CanvasInterface.js :
   261 |
   262 |    return OdysseyCanvasInterface;
   263 |}());
-------------^

Variable declarations must be the first statements of a function scope. at Scripts/View/Minimap.js :
    68 |        // TODO fix
    69 |        return;
    70 |        var xs, ys, zs, items, i, itemCount, itemMapColor, dx, dy;
----------------^
    71 |        xs = this.position.x - 63;
    72 |        ys = this.position.y - 63;

Expect valid jsdoc-block definition at Scripts/View/NavigationList.js :
     7 |    "use strict";
     8 |    var $body = $(document.body);
     9 |    function OdysseyNavigationList() {
------------^
    10 |        this.eventDispatcher = new Odyssey.Events.EventDispatcher();
    11 |    }

Expect valid jsdoc-block definition at Scripts/View/Overlay.js :
    10 |Odyssey.View.Overlay = (function ($) {
    11 |    "use strict";
    12 |    function OdysseyOverlay() {
------------^
    13 |        var z = 0;
    14 |

Expect valid jsdoc-block definition at Scripts/View/Overlay.js :
    54 |    extend(OdysseyOverlay.prototype, new Odyssey.View.CanvasInterface());
    55 |
    56 |    OdysseyOverlay.prototype.resize = function (dimens) {
----------------------------------------------^
    57 |        $(this.getCanvases())
    58 |            .attr('width', 32 * (dimens + 1))

Expect valid jsdoc-block definition at Scripts/View/Overlay.js :
    62 |    };
    63 |
    64 |    OdysseyOverlay.prototype.isPainted = function (cvsID, offsetX, offsetY) {
-------------------------------------------------^
    65 |        //return (this.painted[z] && this.painted[z][y] && this.painted[z][y][x]) || false;
    66 |        return (this.painted[cvsID] && this.painted[cvsID][offsetY] && this.painted[cvsID][offsetY][offsetX]) || false;

Expect valid jsdoc-block definition at Scripts/View/Overlay.js :
    67 |    };
    68 |
    69 |    OdysseyOverlay.prototype.setPainted = function (index, rx, ry, val) {
--------------------------------------------------^
    70 |        if (!this.painted.hasOwnProperty(index)) {
    71 |            this.painted[index] = {};

Expect valid jsdoc-block definition at Scripts/View/Overlay.js :
    79 |    };
    80 |
    81 |    OdysseyOverlay.prototype.clear = function () {
---------------------------------------------^
    82 |        var i, len = this.canvases.length;
    83 |        for (i = 0; i < len; i += 1) {

Expect valid jsdoc-block definition at Scripts/View/Overlay.js :
    88 |    };
    89 |
    90 |    OdysseyOverlay.prototype.drawSelected = function (x, y, z, isSelected) {
----------------------------------------------------^
    91 |        var index = this.getCanvasSectionIndex(x, y, z), cvs, ctx, offsetX, offsetY;
    92 |        if (index === -1) {

Expect valid jsdoc-block definition at Scripts/View/Overlay.js :
   112 |    };
   113 |
   114 |    OdysseyOverlay.prototype.isSelected = function (x, y, z) {
--------------------------------------------------^
   115 |        return Boolean(this.selected[z] && this.selected[z][y] && this.selected[z][y][x]);
   116 |    };

Expect valid jsdoc-block definition at Scripts/View/Overlay.js :
   116 |    };
   117 |
   118 |    OdysseyOverlay.prototype.setSelectedStatus = function (x, y, z, val) {
---------------------------------------------------------^
   119 |        if (!this.selected.hasOwnProperty(z)) {
   120 |            this.selected[z] = {};

Unavailable tag TODO at Scripts/View/Overlay.js :
   131 |     * Refreshes the whole viewport. This is used when the sprites are known to be loaded.
   132 |     * @returns {Boolean} true if the refresh was successful; false otherwise.
   133 |     * @TODO generalize and move to interface. Derived from TileMap.
---------------^
   134 |     */
   135 |    OdysseyOverlay.prototype.refresh = function () {

Expect valid jsdoc-block definition at Scripts/View/Overlay.js :
   158 |    };
   159 |
   160 |    OdysseyOverlay.prototype.render = function () {
----------------------------------------------^
   161 |        if (this.translate()) {
   162 |            this.refresh();

Expect valid jsdoc-block definition at Scripts/View/Overlay.js :
   165 |    };
   166 |
   167 |    OdysseyOverlay.prototype.select = function select(x, y, z) {
----------------------------------------------^
   168 |        if (!this.isSelected(x, y, z)) {
   169 |            this.setSelectedStatus(x, y, z, true);

Expect valid jsdoc-block definition at Scripts/View/Overlay.js :
   173 |    };
   174 |
   175 |    OdysseyOverlay.prototype.unselect = function unselect(x, y, z) {
------------------------------------------------^
   176 |        if (this.isSelected(x, y, z)) {
   177 |            this.setSelectedStatus(x, y, z, false);

Expect valid jsdoc-block definition at Scripts/View/Overlay.js :
   180 |    };
   181 |
   182 |    OdysseyOverlay.prototype.update = function () {
----------------------------------------------^
   183 |        this.render();
   184 |    };

Expect valid jsdoc-block definition at Scripts/View/TileMap.js :
    96 |    extend(OdysseyTileMap.prototype, new Odyssey.View.CanvasInterface());
    97 |
    98 |    OdysseyTileMap.prototype.resize = function (dimens) {
----------------------------------------------^
    99 |        $(this.getCanvases())
   100 |            .attr('width', 32 * (dimens + 1))

Expected dat but got Dat at Scripts/View/TileMap.js :
   375 |     * Creates a new array of items, sorted according to the provided Dat context.
   376 |     * @param {Array<Object>} items the array of map items to sort.
   377 |     * @param {Dat} Dat the Dat context to sort according to.
-----------------------^
   378 |     * @returns {Array<Object>} a copy of the items array sorted according to render order.
   379 |     * @static

Unavailable tag TODO at Scripts/View/TileMap.js :
   461 |    /**
   462 |     * Starts loading all maps required to render the full viewport.
   463 |     * @TODO find return value
---------------^
   464 |     */
   465 |    OdysseyTileMap.prototype.loadMaps = function () {

Expect valid jsdoc-block definition at Scripts/View/View.js :
    12 |Odyssey.View.View = (function () {
    13 |    "use strict";
    14 |    function OdysseyView() {
------------^
    15 |        this.eventDispatcher = new Odyssey.Events.EventDispatcher();
    16 |        this.minimap = null;

Expect valid jsdoc-block definition at Scripts/View/ViewPositionAttributor.js :
     7 |Odyssey.View.ViewPositionAttributor = (function () {
     8 |    "use strict";
     9 |    function OdysseyViewPositionAttributor() {
------------^
    10 |        this.eventDispatcher = new Odyssey.Events.EventDispatcher();
    11 |    }


125 code style errors found.
