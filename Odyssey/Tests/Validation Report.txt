Expect valid jsdoc-block definition at Scripts/Controller/OdysseyController.js :
    59 |    extend(OdysseyController.prototype, new OdysseyEventDispatchInterface());
    60 |    OdysseyController.CONTROL_OVERLAY_CLICK = 0;
    61 |    OdysseyController.prototype.handleControlOverlayClick = function (e) {
--------------------------------------------------------------------^
    62 |        var Odyssey = this.context,
    63 |            xOffset = getX(e.target, Odyssey.overlayCanvases) * Odyssey.sizeX,

Expect valid jsdoc-block definition at Scripts/Controller/OdysseyController.js :
    72 |    };
    73 |
    74 |    OdysseyController.prototype.setControlManager = function (controlManager) {
------------------------------------------------------------^
    75 |        this.controlManager = controlManager;
    76 |    };

Expect valid jsdoc-block definition at Scripts/Controller/OdysseyController.js :
    75 |        this.controlManager = controlManager;
    76 |    };
    77 |    OdysseyController.prototype.setContext = function (Odyssey) {
-----------------------------------------------------^
    78 |        this.context = Odyssey;
    79 |    };

Expect valid jsdoc-block definition at Scripts/Controller/OdysseyController.js :
    78 |        this.context = Odyssey;
    79 |    };
    80 |    OdysseyController.prototype.disable = function (controlID) {
--------------------------------------------------^
    81 |        this.controlStates[controlID] = false;
    82 |    };

Expect valid jsdoc-block definition at Scripts/Controller/OdysseyController.js :
    81 |        this.controlStates[controlID] = false;
    82 |    };
    83 |    OdysseyController.prototype.enable = function (controlID) {
-------------------------------------------------^
    84 |        this.controlStates[controlID] = true;
    85 |    };

Expect valid jsdoc-block definition at Scripts/Controller/OdysseyController.js :
    84 |        this.controlStates[controlID] = true;
    85 |    };
    86 |    OdysseyController.prototype.isDisabled = function (controlID) {
-----------------------------------------------------^
    87 |        return (this.controlStates[controlID] === false);
    88 |    };

Expect valid jsdoc-block definition at Scripts/Controller/OdysseyController.js :
    87 |        return (this.controlStates[controlID] === false);
    88 |    };
    89 |    OdysseyController.prototype.isEnabled = function (controlID) {
----------------------------------------------------^
    90 |        // Controls are enabled by default.
    91 |        return (!this.isDisabled(controlID));

Expect valid jsdoc-block definition at Scripts/Controller/OdysseyController.js :
    91 |        return (!this.isDisabled(controlID));
    92 |    };
    93 |    OdysseyController.prototype.initialize = function () {
-----------------------------------------------------^
    94 |        var ctx = this;
    95 |        // Initialize the canvas selection.

Expect valid jsdoc-block definition at Scripts/Controller/OdysseyController.js :
    94 |        var ctx = this;
    95 |        // Initialize the canvas selection.
    96 |        function dispatchControl() {
----------------^
    97 |            ctx.handleControlOverlayClick();
    98 |        }

Expect valid jsdoc-block definition at Scripts/Controller/OdysseyControllerAttributor.js :
     1 |var OdysseyControllerAttributor = (function () {
     2 |    "use strict";
     3 |    function OdysseyControllerAttributor() {}
------------^
     4 |    /**
     5 |     * Sets the controller. This object should contain methods to bind controls.

Expect valid jsdoc-block definition at Scripts/Controller/OdysseyControlManager.js :
     2 |var OdysseyControlManager = (function () {
     3 |    "use strict";
     4 |    function OdysseyControlManager() {
------------^
     5 |        this.eventDispatcher = new OdysseyEventDispatcher();
     6 |        this.controls = [];

Expect valid jsdoc-block definition at Scripts/Controller/OdysseyControlManager.js :
    11 |    extend(OdysseyControlManager.prototype, new OdysseyControllerAttributor());
    12 |
    13 |    OdysseyControlManager.prototype.addControl = function (control) {
---------------------------------------------------------^
    14 |        this.controls.push(control);
    15 |        control.setParentEventHandler(this.eventDispatcher);

Expect valid jsdoc-block definition at Scripts/Controller/OdysseyLinkClickControl.js :
    63 |    };
    64 |
    65 |    OdysseyLinkClickControl.handleClickProxy = function (ctx) {
-------------------------------------------------------^
    66 |        return function (e) {
    67 |            if (!ctx.processClick(e.target)) {

Expect valid jsdoc-block definition at Scripts/Controller/OdysseyMapSearch.js :
    15 |    // TODO CLEANUP : do we use this method or OdysseyMapSearch.worker.onmessage ?
    16 |    // does not seem to be used.
    17 |    window.onmessage = function handleMessage(e) {
-------------------------------^
    18 |        var id, type, data;
    19 |        if (e.hasOwnProperty('id')) {

Expect valid jsdoc-block definition at Scripts/Controller/OdysseyMapSearch.js :
    49 |    */
    50 |
    51 |    function OdysseyMapSearchRequest(action) {
------------^
    52 |        this.eventDispatcher = new OdysseyEventDispatcher();
    53 |        this.action = action;

Expect valid jsdoc-block definition at Scripts/Controller/OdysseyMapSearch.js :
    55 |    }
    56 |    extend(OdysseyMapSearchRequest.prototype, new OdysseyEventDispatchInterface());
    57 |    OdysseyMapSearchRequest.prototype.setData = function (data) {
--------------------------------------------------------^
    58 |        this.data = data;
    59 |    };

Expect valid jsdoc-block definition at Scripts/Controller/OdysseyMapSearch.js :
    58 |        this.data = data;
    59 |    };
    60 |    OdysseyMapSearchRequest.prototype.setID = function (id) {
------------------------------------------------------^
    61 |        this.id = id;
    62 |    };

Expect valid jsdoc-block definition at Scripts/Controller/OdysseyMapSearch.js :
    62 |    };
    63 |
    64 |    function OdysseyMapSearch() {
------------^
    65 |        var ctx = this;
    66 |        this.worker = new Worker("Odyssey/Scripts/Controller/Search.Worker.js");

Expect valid jsdoc-block definition at Scripts/Controller/OdysseyMapSearch.js :
    68 |        this.messages = [];
    69 |
    70 |        this.worker.onmessage = function (e) {
----------------------------------------^
    71 |            var msg = JSON.parse(e.data), id = msg.id, handler;
    72 |            // Request handler for this message ID.

Expect valid jsdoc-block definition at Scripts/Controller/OdysseyMapSearch.js :
    83 |    extend(OdysseyMapSearch.prototype, new OdysseyEventDispatchInterface());
    84 |
    85 |    OdysseyMapSearch.prototype.createRequest = function (type, data) {
-------------------------------------------------------^
    86 |        var req = new OdysseyMapSearchRequest(type);
    87 |        req.setParentEventHandler(this.eventDispatcher);

Expect valid jsdoc-block definition at Scripts/Controller/OdysseyMapSearch.js :
    92 |    };
    93 |
    94 |    OdysseyMapSearch.prototype.sendRequest = function (req) {
-----------------------------------------------------^
    95 |        this.worker.postMessage(JSON.stringify(req));
    96 |    };

Expect valid jsdoc-block definition at Scripts/Controller/OdysseyMapSearch.js :
    96 |    };
    97 |
    98 |    OdysseyMapSearch.prototype.find = function (o, fnFind, fnComplete) {
----------------------------------------------^
    99 |        var data, req;
   100 |        data = {

Expect valid jsdoc-block definition at Scripts/Controller/OdysseyMapSearch.js :
   113 |    };
   114 |
   115 |    OdysseyMapSearch.prototype.sendData = function (maps) {
--------------------------------------------------^
   116 |        var req = this.createRequest("send", maps);
   117 |        this.sendRequest(req);

Expect valid jsdoc-block definition at Scripts/Controller/OdysseyNavigationControl.js :
   122 |    };
   123 |
   124 |    OdysseyNavigationControl.prototype.initialize = function () {
------------------------------------------------------------^
   125 |        var ctx = this,
   126 |            $body = $(document.body),

Expect valid jsdoc-block definition at Scripts/Controller/OdysseyOverlayControl.js :
     2 |var OdysseyOverlayControl = (function () {
     3 |    "use strict";
     4 |    function OdysseyOverlayControl() {
------------^
     5 |        this.eventDispatcher = new OdysseyEventDispatcher();
     6 |    }

Expect valid jsdoc-block definition at Scripts/Controller/OdysseyOverlayControl.js :
     7 |    extend(OdysseyOverlayControl.prototype, new OdysseyEventDispatchInterface());
     8 |
     9 |    OdysseyOverlayControl.clearCanvas = function clearCanvas(cvs, xStart, yStart, width, height) {
------------------------------------------------^
    10 |        cvs.getContext('2d').clearRect(xStart, yStart, width, height);
    11 |    };

Expect valid jsdoc-block definition at Scripts/Controller/OdysseyOverlayControl.js :
    11 |    };
    12 |
    13 |    OdysseyOverlayControl.unpaintAll = function unpaintAll() {
-----------------------------------------------^
    14 |        var canvases = this.context.overlayCanvases, i, len = canvases.length;
    15 |        for (i = 0; i < len; i += 1) {

Expect valid jsdoc-block definition at Scripts/Controller/OdysseyOverlayControl.js :
    18 |    };
    19 |
    20 |    OdysseyOverlayControl.prototype.select = function select(pos) {
-----------------------------------------------------^
    21 |        var index = this.context.getCanvasSectionIndex(pos.x, pos.y), cvs, ctx;
    22 |        if (index !== -1) {

Expect valid jsdoc-block definition at Scripts/Controller/OdysseyOverlayControl.js :
    28 |    };
    29 |
    30 |    OdysseyOverlayControl.prototype.unselect = function unselect(pos) {
-------------------------------------------------------^
    31 |        var index = this.context.getCanvasSectionIndex(pos.x, pos.y), cvs;
    32 |        if (index !== -1) {

Expect valid jsdoc-block definition at Scripts/Controller/OdysseyOverlayControl.js :
    36 |    };
    37 |
    38 |    OdysseyOverlayControl.prototype.setContext = function (Odyssey) {
---------------------------------------------------------^
    39 |        this.context = Odyssey;
    40 |    };

Expect valid jsdoc-block definition at Scripts/Controller/OdysseyOverlayControl.js :
    40 |    };
    41 |
    42 |    OdysseyOverlayControl.prototype.update = function () {
-----------------------------------------------------^
    43 |        // TODO. Need access to position.
    44 |    };

Expect valid jsdoc-block definition at Scripts/Controller/OdysseyWorldMapControl.js :
     3 |var OdysseyWorldMapControl = (function ($) {
     4 |    "use strict";
     5 |    function OdysseyWorldMapControl() {
------------^
     6 |        this.eventDispatcher = new OdysseyEventDispatcher();
     7 |        this.mouseIsDown = false;

Expect valid jsdoc-block definition at Scripts/Controller/OdysseyWorldMapControl.js :
    11 |    extend(OdysseyWorldMapControl.prototype, new OdysseyModelAttributor());
    12 |
    13 |    OdysseyWorldMapControl.prototype.processShowClick = function () {
----------------------------------------------------------------^
    14 |        this.getView().getWorldMap().show();
    15 |    };

Expect valid jsdoc-block definition at Scripts/Controller/OdysseyWorldMapControl.js :
    15 |    };
    16 |
    17 |    OdysseyWorldMapControl.prototype.processHideClick = function () {
----------------------------------------------------------------^
    18 |        this.getView().getWorldMap().hide();
    19 |    };

Expect valid jsdoc-block definition at Scripts/Controller/OdysseyWorldMapControl.js :
    19 |    };
    20 |
    21 |    OdysseyWorldMapControl.prototype.setPosition = function (x, y, z) {
-----------------------------------------------------------^
    22 |        this.getView().getWorldMap().setMapPosition(x, y, z);
    23 |    };

Expect valid jsdoc-block definition at Scripts/Controller/OdysseyWorldMapControl.js :
    23 |    };
    24 |
    25 |    OdysseyWorldMapControl.prototype.initialize = function () {
----------------------------------------------------------^
    26 |        var ctx = this;
    27 |        $("#OdysseyOpenMinimap").click(function () {

Expect valid jsdoc-block definition at Scripts/Controller/Search.Worker.js :
    11 |
    12 |    /* Utility functions */
    13 |    function extend(a, b) {
------------^
    14 |        var p;
    15 |        for (p in b) {

Expect valid jsdoc-block definition at Scripts/Controller/Search.Worker.js :
    21 |    }
    22 |
    23 |    function OdysseySearchResult() {
------------^
    24 |        this.position = {};
    25 |        this.items = [];

Expect valid jsdoc-block definition at Scripts/Controller/Search.Worker.js :
    26 |        this.creatures = [];
    27 |    }
    28 |    OdysseySearchResult.prototype.setPosition = function (o) {
--------------------------------------------------------^
    29 |        this.position.x = o.x;
    30 |        this.position.y = o.y;

Expect valid jsdoc-block definition at Scripts/Controller/Search.Worker.js :
    31 |        this.position.z = o.z;
    32 |    };
    33 |    OdysseySearchResult.prototype.setItems = function (items) {
-----------------------------------------------------^
    34 |        Array.prototype.push.apply(this.items, items);
    35 |    };

Expect valid jsdoc-block definition at Scripts/Controller/Search.Worker.js :
    34 |        Array.prototype.push.apply(this.items, items);
    35 |    };
    36 |    OdysseySearchResult.prototype.setCreatures = function (creatures) {
---------------------------------------------------------^
    37 |        Array.prototype.push.apply(this.creatures, creatures);
    38 |    };

Expect valid jsdoc-block definition at Scripts/Controller/Search.Worker.js :
    38 |    };
    39 |
    40 |    function setData(msg) {
------------^
    41 |        extend(savedMaps, msg.data);
    42 |    }

Expect valid jsdoc-block definition at Scripts/Controller/Search.Worker.js :
    42 |    }
    43 |
    44 |    function resolveOffset(x, y) {
------------^
    45 |        return (x + (y << 8));
    46 |    }

Expect valid jsdoc-block definition at Scripts/Controller/Search.Worker.js :
    46 |    }
    47 |
    48 |    function getTile(map, x, y) {
------------^
    49 |        var offset = resolveOffset(x, y);
    50 |

Expect valid jsdoc-block definition at Scripts/Controller/Search.Worker.js :
    52 |    }
    53 |
    54 |    function mapContainsItem(map, itemID) {
------------^
    55 |        return map.Items.indexOf(itemID) !== -1;
    56 |    }

Expect valid jsdoc-block definition at Scripts/Controller/Search.Worker.js :
    56 |    }
    57 |
    58 |    function mapContainsOneOfItem(map, itemIDs) {
------------^
    59 |        var i, len = itemIDs.length;
    60 |        for (i = 0; i < len; i += 1) {

Expect valid jsdoc-block definition at Scripts/Controller/Search.Worker.js :
    66 |    }
    67 |
    68 |    function tileContainsItem(tile, itemID) {
------------^
    69 |        var i, len;
    70 |        if (tile.hasOwnProperty('Items')) {

Expect valid jsdoc-block definition at Scripts/Controller/Search.Worker.js :
    80 |    }
    81 |
    82 |    function getTileAbsolutePosition(map, x, y) {
------------^
    83 |        return {
    84 |            x: map.BaseX + x,

Expect valid jsdoc-block definition at Scripts/Controller/Search.Worker.js :
    88 |    }
    89 |
    90 |    function tileContainsCreature(tile, creature) {
------------^
    91 |        if (tile.hasOwnProperty('creatures')) {
    92 |            return tile.creatures.indexOf(creature) !== -1;

Expect valid jsdoc-block definition at Scripts/Controller/Search.Worker.js :
    95 |    }
    96 |
    97 |    function searchMap(map, o) {
------------^
    98 |        var mapX, mapY, i, len, searchItems, searchCreatures, tile, results = [], itemsFound = [], creaturesFound = [], r;
    99 |        searchItems = (o && o.data && o.data.items) || [];

Expect valid jsdoc-block definition at Scripts/Controller/Search.Worker.js :
   144 |        }
   145 |    }
   146 |    function searchData(o) {
------------^
   147 |        var map, globalResultSet = [], result;
   148 |        for (map in savedMaps) {

Expect valid jsdoc-block definition at Scripts/Controller/Search.Worker.js :
   161 |    }
   162 |
   163 |    onmessage = function (e) {
------------------------^
   164 |        var msg = JSON.parse(e.data);
   165 |

Expect valid jsdoc-block definition at Scripts/Controller/Search.Worker.js :
   167 |        if (msg.action === 'search') {
   168 |            searchData(extend(msg, {
   169 |                onfind: function (result) {
--------------------------------^
   170 |                    var request = {
   171 |                        result: result,

Expect valid jsdoc-block definition at Scripts/Controller/Search.Worker.js :
   175 |                    postMessage(JSON.stringify(request));
   176 |                },
   177 |                oncomplete: function (results) {
------------------------------------^
   178 |                    var request = {
   179 |                        results: results,

Expect valid jsdoc-block definition at Scripts/Events/OdysseyBinaryFileErrorEvent.js :
     2 |var OdysseyBinaryFileErrorEvent = (function () {
     3 |    "use strict";
     4 |    function OdysseyBinaryFileErrorEvent(context) {
------------^
     5 |        this.file = context;
     6 |    }

Expect valid jsdoc-block definition at Scripts/Events/OdysseyBinaryFileLoadedEvent.js :
     2 |var OdysseyBinaryFileLoadedEvent = (function () {
     3 |    "use strict";
     4 |    function OdysseyBinaryFileLoadedEvent(context) {
------------^
     5 |        this.file = context;
     6 |    }

Expect valid jsdoc-block definition at Scripts/Events/OdysseyEvent.js :
    11 |    }
    12 |    OdysseyEvent.prototype.propagationStopped = false;
    13 |    OdysseyEvent.prototype.stopPropagation = function () {
-----------------------------------------------------^
    14 |        this.propagationStopped = true;
    15 |    };

Expect valid jsdoc-block definition at Scripts/Events/OdysseyEvent.js :
    15 |    };
    16 |    OdysseyEvent.prototype.defaultPrevented = false;
    17 |    OdysseyEvent.prototype.preventDefault = function () {
----------------------------------------------------^
    18 |        this.defaultPrevented = true;
    19 |    };

Expect valid jsdoc-block definition at Scripts/Events/OdysseyEventDispatcher.js :
     8 |        this.events = {};
     9 |    }
    10 |    OdysseyEventDispatcher.prototype.toJSON = function () {
------------------------------------------------------^
    11 |        // Do not serialize this object, as it is a container for functions.
    12 |        return;

Expect valid jsdoc-block definition at Scripts/Events/OdysseyEventDispatcher.js :
    13 |    };
    14 |    OdysseyEventDispatcher.prototype.parent = null;
    15 |    OdysseyEventDispatcher.prototype.getParentEventHandler = function () {
---------------------------------------------------------------------^
    16 |        return this.parent;
    17 |    };

Expect valid jsdoc-block definition at Scripts/Events/OdysseyEventDispatcher.js :
    16 |        return this.parent;
    17 |    };
    18 |    OdysseyEventDispatcher.prototype.setParentEventHandler = function (parent) {
---------------------------------------------------------------------^
    19 |        this.parent = parent;
    20 |    };

Expect valid jsdoc-block definition at Scripts/Events/OdysseyEventDispatcher.js :
    19 |        this.parent = parent;
    20 |    };
    21 |    OdysseyEventDispatcher.prototype.getEventHandler = function (type) {
---------------------------------------------------------------^
    22 |        if (!this.events.hasOwnProperty(type)) {
    23 |            this.events[type] = new OdysseyEventHandler(type);

Expect valid jsdoc-block definition at Scripts/Events/OdysseyEventDispatcher.js :
    26 |    };
    27 |
    28 |    OdysseyEventDispatcher.prototype.dispatch = function (ctx, e) {
--------------------------------------------------------^
    29 |        var handler = this.getEventHandler(e.type), parent;
    30 |        handler.fire(ctx, e);

Expect valid jsdoc-block definition at Scripts/Events/OdysseyEventDispatcher.js :
    38 |    };
    39 |
    40 |    OdysseyEventDispatcher.prototype.addListener = function (type, fn) {
-----------------------------------------------------------^
    41 |        var handler = this.getEventHandler(type);
    42 |        handler.addListener(fn);

Expect valid jsdoc-block definition at Scripts/Events/OdysseyEventDispatcher.js :
    43 |    };
    44 |
    45 |    OdysseyEventDispatcher.prototype.removeListener = function (type, fn) {
--------------------------------------------------------------^
    46 |        var handler = this.getEventHandler(type);
    47 |        handler.removeListener(fn);

Expect valid jsdoc-block definition at Scripts/Events/OdysseyEventHandler.js :
     1 |var OdysseyEventHandler = (function () {
     2 |    "use strict";
     3 |    function OdysseyEventHandler(type) {
------------^
     4 |        this.type = type;
     5 |        this.listeners = [];

Expect valid jsdoc-block definition at Scripts/Events/OdysseyEventHandler.js :
     5 |        this.listeners = [];
     6 |    }
     7 |    OdysseyEventHandler.prototype.fire = function (ctx, e) {
-------------------------------------------------^
     8 |        var i, len = this.listeners.length;
     9 |        for (i = 0; (i < len && !e.propagationStopped); i += 1) {

Expect valid jsdoc-block definition at Scripts/Events/OdysseyEventHandler.js :
    12 |    };
    13 |
    14 |    OdysseyEventHandler.prototype.addListener = function (fn) {
--------------------------------------------------------^
    15 |        this.listeners.push(fn);
    16 |    };

Expect valid jsdoc-block definition at Scripts/Events/OdysseyEventHandler.js :
    16 |    };
    17 |
    18 |    OdysseyEventHandler.prototype.removeListener = function (fn) {
-----------------------------------------------------------^
    19 |        var index = this.listeners.indexOf(fn), len;
    20 |        if (index !== -1) {

Expect valid jsdoc-block definition at Scripts/Events/OdysseyLinkClickEvent.js :
     2 |var OdysseyLinkClickEvent = (function () {
     3 |    "use strict";
     4 |    function OdysseyLinkClickEvent(x, y, z) {
------------^
     5 |        this.x = x;
     6 |        this.y = y;

Expect valid jsdoc-block definition at Scripts/Events/OdysseyResourceManagerCompleteEvent.js :
     2 |var OdysseyResourceManagerCompleteEvent = (function () {
     3 |    "use strict";
     4 |    function OdysseyResourceManagerCompleteEvent() {}
------------^
     5 |    extend(OdysseyResourceManagerCompleteEvent.prototype, new OdysseyEvent("OdysseyResourceManagerComplete"));
     6 |

Expect valid jsdoc-block definition at Scripts/Events/OdysseySpriteIndexLoadedEvent.js :
     2 |var OdysseySpriteIndexLoadedEvent = (function () {
     3 |    "use strict";
     4 |    function OdysseySpriteIndexLoadedEvent() {}
------------^
     5 |    extend(OdysseySpriteIndexLoadedEvent.prototype, new OdysseyEvent('OdysseySpriteIndexLoaded'));
     6 |

Expect valid jsdoc-block definition at Scripts/Events/OdysseyWorldMapHideEvent.js :
     2 |var OdysseyWorldMapHideEvent = (function () {
     3 |    "use strict";
     4 |    function OdysseyWorldMapHideEvent() {}
------------^
     5 |    extend(OdysseyWorldMapHideEvent.prototype, new OdysseyEvent('OdysseyWorldMapHide'));
     6 |

Expect valid jsdoc-block definition at Scripts/Events/OdysseyWorldMapShowEvent.js :
     2 |var OdysseyWorldMapShowEvent = (function () {
     3 |    "use strict";
     4 |    function OdysseyWorldMapShowEvent() {}
------------^
     5 |    extend(OdysseyWorldMapShowEvent.prototype, new OdysseyEvent('OdysseyWorldMapShow'));
     6 |

Expect valid jsdoc-block definition at Scripts/Events/OdysseyWorldMapToggleEvent.js :
     2 |var OdysseyWorldMapToggleEvent = (function () {
     3 |    "use strict";
     4 |    function OdysseyWorldMapToggleEvent() {}
------------^
     5 |    extend(OdysseyWorldMapToggleEvent.prototype, new OdysseyEvent('OdysseyWorldMapToggle'));
     6 |

Expect valid jsdoc-block definition at Scripts/Generics/Helper.js :
    18 |    };
    19 |
    20 |    ctx.count = function count(arr, val) {
------------------------^
    21 |        var cnt = 0, i, len = arr.length;
    22 |        for (i = 0; i < len; i += 1) {

Expect valid jsdoc-block definition at Scripts/Generics/Helper.js :
    28 |    };
    29 |
    30 |    ctx.extend = function (proto) {
-------------------------^
    31 |        var k, i, o;
    32 |        for (i = arguments.length - 1; i > 0; i -= 1) {

Expect valid jsdoc-block definition at Scripts/Generics/ResourceManager.js :
    22 |
    23 |        // Getter for private fileUID.
    24 |        this.getUniqueFileID = function () {
---------------------------------------^
    25 |            var id = fileUID;
    26 |            fileUID += 1;

Unavailable tag TODO at Scripts/Generics/ResourceManager.js :
   135 |     * Gets the resource with the given ID.
   136 |     * @param {Number} index the resource's ID.
   137 |     * @TODO what does this return? ResourceManagerFile?
---------------^
   138 |     */
   139 |    ResourceManager.prototype.getResource = function (index) {

Unavailable tag TODO at Scripts/Generics/ResourceManager.js :
   240 |     * @param {Number} id the resource ID to check.
   241 |     * @returns {Boolean} true if the resource is awaiting load; false otherwise.
   242 |     * @TODO this is not true, returns true if it's already loaded.
---------------^
   243 |     */
   244 |    ResourceManager.prototype.isAwaitingLoad = function (id) {

Unavailable tag TODO at Scripts/Generics/ResourceManager.js :
   260 |    /**
   261 |     * Filters out resources not awaiting load.
   262 |     * @TODO
---------------^
   263 |     */
   264 |    ResourceManager.prototype.filterAwaiting = function () {

Function is missing documentation for parameter `a`. at Scripts/Generics/ResourceManager.js :
   294 |         * @returns {Number} negative if the two items should be swapped; positive otherwise.
   295 |         */
   296 |        function sorter(a, b) {
----------------^
   297 |            return (map[a] || 0) - (map[b] || 0);
   298 |        }

Function is missing documentation for parameter `b`. at Scripts/Generics/ResourceManager.js :
   294 |         * @returns {Number} negative if the two items should be swapped; positive otherwise.
   295 |         */
   296 |        function sorter(a, b) {
----------------^
   297 |            return (map[a] || 0) - (map[b] || 0);
   298 |        }

Function is missing documentation for parameter `filename`. at Scripts/Generics/ResourceManager.js :
   451 |     * @returns {Number} the resource ID of the resource identified by the filename.
   452 |     */
   453 |    ResourceManager.prototype.getResourceIDByFilename = function (filename) {
----------------------------------------------------------------^
   454 |        return this.getResourceIDByFilenameWithPrefix(this.prefix + filename);
   455 |    };

Function is missing documentation for parameter `filename`. at Scripts/Generics/ResourceManager.js :
   459 |     * @returns {Number} the resource ID of the resource identified by the filename.
   460 |     */
   461 |    ResourceManager.prototype.getResourceIDByFilenameWithPrefix = function (filename) {
--------------------------------------------------------------------------^
   462 |        if (!this.hasFileWithPrefix(filename)) {
   463 |            throw new Error("Resource " + filename + " does not exist.");

Function is missing documentation for parameter `filename`. at Scripts/Generics/ResourceManager.js :
   470 |     * @returns {Boolean} true if the file with this name exists; false otherwise.
   471 |     */
   472 |    ResourceManager.prototype.hasFile = function (filename) {
------------------------------------------------^
   473 |        return this.hasFileWithPrefix(this.prefix + filename);
   474 |    };

Function is missing documentation for parameter `filename`. at Scripts/Generics/ResourceManager.js :
   478 |     * @returns {Boolean} true if the file with this name exists; false otherwise.
   479 |     */
   480 |    ResourceManager.prototype.hasFileWithPrefix = function (filename) {
----------------------------------------------------------^
   481 |        return this.srcs.hasOwnProperty(filename);
   482 |    };

Unavailable tag TODO at Scripts/Main.js :
   261 |            /**
   262 |             * Updates the progress bar in response to core files being loaded.
   263 |             * @TODO implement
-----------------------^
   264 |             */
   265 |            function updateProgressBarLoadingCore() {

Expected obj but got the at Scripts/Model/Dat.js :
   191 |        /**
   192 |         * Handles the successful loading of the Dat.
   193 |         * @param {Object} the response from the AJAX request
-----------------------------------^
   194 |         * containing the Dat's data.
   195 |         */

Illegal trailing whitespace at Scripts/Model/Dat.js :
   202 |            dat.setLoaded(true);
   203 |            dat.setLoading(false);
   204 |        }        
-------------------------^
   205 |        // Load the Tibia Dat JSON file.
   206 |        $.ajax({

Expected resourceManager but got the at Scripts/Model/OdysseyMapIndex.js :
    36 |     * Adds the map index data to the resource manager so that
    37 |     * the resource manager knows which resources are valid.
    38 |     * @param {ResourceManager} the resource manager to add to.
----------------------------------------^
    39 |     */
    40 |    OdysseyMapIndex.prototype.addToResourceManager = function (resourceManager) {

Unavailable tag constructor. at Scripts/Model/OdysseyModel.js :
    10 |    /**
    11 |     * Creates a model for the web application.
    12 |     * @constructor.
---------------^
    13 |     */
    14 |    function OdysseyModel() {

Wrong returns value at Scripts/Model/OdysseyWorld.js :
    37 |            return this[x][y][z];
    38 |        }
    39 |        return null;
-----------------------^
    40 |    };
    41 |

Variable declarations must be the first statements of a function scope. at Scripts/View/OdysseyMinimap.js :
    61 |    OdysseyMinimap.prototype.update = function () {
    62 |        return;
    63 |        var xs, ys, zs, items, i, itemCount, itemMapColor, dx, dy;
----------------^
    64 |        xs = this.position.x - 63;
    65 |        ys = this.position.y - 63;

Illegal trailing whitespace at Scripts/View/OdysseySpriteIndex.js :
    67 |        var spriteIndex = new OdysseySpriteIndex();
    68 |        spriteIndex.setLoading(true);
    69 |        
----------------^
    70 |        /**
    71 |         * Handles the successful load of the sprite index.

Unavailable tag TODO at Scripts/View/OdysseyTileInfo.js :
    17 |    /**
    18 |     * Sets the context.
    19 |     * @TODO remove
---------------^
    20 |     * @param {Odyssey} Odyssey the Odyssey context to use.
    21 |     */

Unavailable tag TODO at Scripts/View/OdysseyTileMap.js :
   566 |    /**
   567 |     * Starts loading all maps required to render the full viewport.
   568 |     * @TODO find return value
---------------^
   569 |     */
   570 |    OdysseyTileMap.prototype.loadMaps = function () {

Expect valid jsdoc-block definition at Scripts/View/OdysseyView.js :
     8 |var OdysseyView = (function () {
     9 |    "use strict";
    10 |    function OdysseyView() {
------------^
    11 |        this.eventDispatcher = new OdysseyEventDispatcher();
    12 |        this.minimap = null;


98 code style errors found.
