Missing line feed at file end at Scripts/Controller/OdysseyControllerAttributor.js :
    20 |
    21 |    return OdysseyControllerAttributor;
    22 |}());
-------------^

Missing line feed at file end at Scripts/Controller/OdysseySearchControl.js :
    67 |
    68 |    return OdysseySearchControl;
    69 |}(jQuery));
-------------------^

Missing line feed at file end at Scripts/Controller/OdysseyWorldMapControl.js :
   108 |
   109 |    return OdysseyWorldMapControl;
   110 |}(jQuery));
-------------------^

Missing line feed at file end at Scripts/Events/OdysseyDatLoadedEvent.js :
     9 |
    10 |    return OdysseyDatLoadedEvent;
    11 |}());
-------------^

Function is missing documentation for parameter `eventName`. at Scripts/Events/OdysseyEvent.js :
     4 |     * @constructor
     5 |     */
     6 |    function OdysseyEvent(eventName) {
------------^
     7 |        this.type = eventName;
     8 |    }

Sentence must start with an upper case letter at Scripts/Events/OdysseyEventDispatchInterface.js :
     1 |/**
     2 | * OdysseyEventDispatchInterface.js
-----------------------------------------^
     3 | * Provides the necessary methods for classes implementing event dispatchers.
     4 | * This class should not be used alone, but instead should be used as an

You started a new line with an upper case letter but previous line does not end with a period at Scripts/Events/OdysseyEventDispatchInterface.js :
     1 |/**
     2 | * OdysseyEventDispatchInterface.js
     3 | * Provides the necessary methods for classes implementing event dispatchers.
-----------^
     4 | * This class should not be used alone, but instead should be used as an
     5 | * extension of an object's prototype.

Missing type in @returns statement at Scripts/Events/OdysseyEventDispatchInterface.js :
    11 |    /**
    12 |     * Gets the object's parent event handler.
    13 |     * @returns the object's parent event handler.
---------------^
    14 |     */
    15 |    OdysseyEventDispatchInterface.prototype.getParentEventHandler = function () {

Missing param type at Scripts/Events/OdysseyEventDispatchInterface.js :
    20 |     * Sets the object's parent event handler. This event handler will receive
    21 |     * bubbling events.
    22 |     * @param parent the event handler to receive bubbling events.
----------------------^
    23 |     */
    24 |    OdysseyEventDispatchInterface.prototype.setParentEventHandler = function (parent) {

Missing param type at Scripts/Events/OdysseyEventDispatchInterface.js :
    27 |    /**
    28 |     * Binds an event listener to be called when the event is triggered.
    29 |     * @param type the event type.
----------------------^
    30 |     * @param fn the function to call when the event is triggered.
    31 |     */

Missing param type at Scripts/Events/OdysseyEventDispatchInterface.js :
    28 |     * Binds an event listener to be called when the event is triggered.
    29 |     * @param type the event type.
    30 |     * @param fn the function to call when the event is triggered.
----------------------^
    31 |     */
    32 |    OdysseyEventDispatchInterface.prototype.addEventListener = function (type, fn) {

Missing param type at Scripts/Events/OdysseyEventDispatchInterface.js :
    37 |     * Removes an event listener so that it is no longer called when
    38 |     * the event is triggered.
    39 |     * @param type the event type.
----------------------^
    40 |     * @param fn the function to remove.
    41 |     */

Missing param type at Scripts/Events/OdysseyEventDispatchInterface.js :
    38 |     * the event is triggered.
    39 |     * @param type the event type.
    40 |     * @param fn the function to remove.
----------------------^
    41 |     */
    42 |    OdysseyEventDispatchInterface.prototype.removeEventListener = function (type, fn) {

Function is missing documentation for parameter `event`. at Scripts/Events/OdysseyEventDispatchInterface.js :
    47 |     * Dispatches an event.
    48 |     */
    49 |    OdysseyEventDispatchInterface.prototype.dispatchEvent = function (event, defaultAction) {
--------------------------------------------------------------------^
    50 |        this.eventDispatcher.dispatch(this, event);
    51 |        if (!event.defaultPrevented && defaultAction !== undefined) {

Function is missing documentation for parameter `defaultAction`. at Scripts/Events/OdysseyEventDispatchInterface.js :
    47 |     * Dispatches an event.
    48 |     */
    49 |    OdysseyEventDispatchInterface.prototype.dispatchEvent = function (event, defaultAction) {
--------------------------------------------------------------------^
    50 |        this.eventDispatcher.dispatch(this, event);
    51 |        if (!event.defaultPrevented && defaultAction !== undefined) {

Missing line feed at file end at Scripts/Events/OdysseyInitializedEvent.js :
     9 |
    10 |    return OdysseyInitializedEvent;
    11 |}());
-------------^

Function is missing documentation for parameter `pos`. at Scripts/Events/OdysseyMapClickEvent.js :
     5 |     * @constructor
     6 |     */
     7 |    function OdysseyMapClickEvent(pos) {
------------^
     8 |        this.position = pos;
     9 |    }

Function is missing documentation for parameter `map`. at Scripts/Events/OdysseyMapFileLoadedEvent.js :
     5 |     * @constructor
     6 |     */
     7 |    function OdysseyMapFileLoadedEvent(map) {
------------^
     8 |        this.target = map;
     9 |    }

Unavailable tag TODO at Scripts/Events/OdysseyMapPositionChangedEvent.js :
     4 |    /**
     5 |     * @constructor
     6 |     * @TODO check if this is obsolete
---------------^
     7 |     */
     8 |    function OdysseyMapPositionChangedEvent(target, position) {

Function is missing documentation for parameter `target`. at Scripts/Events/OdysseyMapPositionChangedEvent.js :
     6 |     * @TODO check if this is obsolete
     7 |     */
     8 |    function OdysseyMapPositionChangedEvent(target, position) {
------------^
     9 |        this.position = position;
    10 |    }

Function is missing documentation for parameter `position`. at Scripts/Events/OdysseyMapPositionChangedEvent.js :
     6 |     * @TODO check if this is obsolete
     7 |     */
     8 |    function OdysseyMapPositionChangedEvent(target, position) {
------------^
     9 |        this.position = position;
    10 |    }

Unavailable tag TODO at Scripts/Events/OdysseyMapZoomChangedEvent.js :
     4 |    /**
     5 |     * @constructor
     6 |     * @TODO check if this is obsolete
---------------^
     7 |     */
     8 |    function OdysseyMapZoomChangedEvent(target, zoom) {

Function is missing documentation for parameter `target`. at Scripts/Events/OdysseyMapZoomChangedEvent.js :
     6 |     * @TODO check if this is obsolete
     7 |     */
     8 |    function OdysseyMapZoomChangedEvent(target, zoom) {
------------^
     9 |        this.zoom = zoom;
    10 |    }

Function is missing documentation for parameter `zoom`. at Scripts/Events/OdysseyMapZoomChangedEvent.js :
     6 |     * @TODO check if this is obsolete
     7 |     */
     8 |    function OdysseyMapZoomChangedEvent(target, zoom) {
------------^
     9 |        this.zoom = zoom;
    10 |    }

Function is missing documentation for parameter `response`. at Scripts/Events/OdysseySearchCompleteEvent.js :
     5 |     * @constructor
     6 |     */
     7 |    function OdysseySearchCompleteEvent(response) {
------------^
     8 |        this.messageID = response.id;
     9 |        this.results = response.result;

Function is missing documentation for parameter `response`. at Scripts/Events/OdysseySearchFindEvent.js :
     5 |     * @constructor
     6 |     */
     7 |    function OdysseySearchFindEvent(response) {
------------^
     8 |        this.messageID = response.id;
     9 |        this.result = response.result;

Missing line feed at file end at Scripts/Events/OdysseySpriteIndexLoadedEvent.js :
     6 |
     7 |    return OdysseySpriteIndexLoadedEvent;
     8 |}());
-------------^

Missing line feed at file end at Scripts/Generics/Helper.js :
    41 |        return proto;
    42 |    };
    43 |}(window));
-------------------^

Variable declarations must be the first statements of a function scope. at Scripts/Generics/ResourceManager.js :
     5 |    function ResourceManager() {
     6 |        this.eventDispatcher = new OdysseyEventDispatcher();
     7 |        var fileUID = 0;
----------------^
     8 |
     9 |        this.spritesheets = [];

Missing param type at Scripts/Generics/ResourceManager.js :
    56 |    /**
    57 |     * Manage a binary file.
    58 |     * @param src the filepath for the binary file.
----------------------^
    59 |     */
    60 |    ResourceManager.prototype.addBinaryFile = function (src) {

Function is missing documentation for parameter `string`. at Scripts/Model/BinaryFile.js :
    13 |     *
    14 |     */
    15 |    BinaryFile.prototype.setContents = function (string) {
-----------------------------------------------^
    16 |        this.contents = string;
    17 |    };

Missing param type at Scripts/Model/Dat.js :
   135 |    /**
   136 |     * Sets the Dat's data.
   137 |     * @param o The Tibia.dat data.
----------------------^
   138 |     */
   139 |    Dat.prototype.setData = function (o) {

Missing param type at Scripts/Model/Dat.js :
   143 |    /**
   144 |     * Sets the Dat's loaded state.
   145 |     * @param val Whether or not the Dat is loaded.
----------------------^
   146 |     */
   147 |    Dat.prototype.setLoaded = function (val) {

Missing param type at Scripts/Model/Dat.js :
   152 |    /**
   153 |     * Sets the Dat's loading state.
   154 |     * @param val Whether or not the Dat is loading.
----------------------^
   155 |     */
   156 |    Dat.prototype.setLoading = function (val) {

Missing param type at Scripts/Model/Dat.js :
   160 |    /**
   161 |     * Gets the map color for the item with the corresponding item ID.
   162 |     * @param id the ID corresponding to the item.
----------------------^
   163 |     * @returns the map color corresponding to the item, or null if it has no map color.
   164 |     */

Missing type in @returns statement at Scripts/Model/Dat.js :
   162 |     * @param id the ID corresponding to the item.
   163 |     * @returns the map color corresponding to the item, or null if it has no map color.
   164 |     */
---------------^
   165 |    Dat.prototype.getMapColor = function (id) {
   166 |        if (!this.data[0][id].hasOwnProperty(Dat.ATTRIBUTE_ID_MINIMAP)) {

Sentence must start with an upper case letter at Scripts/Model/Dat.js :
   171 |
   172 |    /**
   173 |     * Gets the Tibia.dat object for the item ID.
------------------------------^
   174 |     * @param id the ID corresponding to the item.
   175 |     * @returns the object corresponding to the item.

Missing param type at Scripts/Model/Dat.js :
   172 |    /**
   173 |     * Gets the Tibia.dat object for the item ID.
   174 |     * @param id the ID corresponding to the item.
----------------------^
   175 |     * @returns the object corresponding to the item.
   176 |     */

Missing type in @returns statement at Scripts/Model/Dat.js :
   174 |     * @param id the ID corresponding to the item.
   175 |     * @returns the object corresponding to the item.
   176 |     */
---------------^
   177 |    Dat.prototype.getItem = function (id) {
   178 |        return this.data[0][id] || null;

Missing param type at Scripts/Model/Dat.js :
   181 |    /**
   182 |     * Loads the Dat file at the url.
   183 |     * @param url The filepath for the Tibia.dat.json file.
----------------------^
   184 |     * @returns an instance of the Dat object. This object is
   185 |     * later populated with data.

Missing type in @returns statement at Scripts/Model/Dat.js :
   183 |     * @param url The filepath for the Tibia.dat.json file.
   184 |     * @returns an instance of the Dat object. This object is
   185 |     * later populated with data.
-----------^
   186 |     * @static
   187 |     */

Missing param type at Scripts/Model/MapFile.js :
     7 |     * Creates a new MapFile corresponding to 16 x 16 x 1 world tiles.
     8 |     * @constructor
     9 |     * @param x The base X value. Use MapFile.getFileX to get the base X value from position.
----------------------^
    10 |     * @param y The base Y value. Use MapFile.getFileY to get the base Y value from position.
    11 |     * @param z The base Z value. Use MapFile.getFileZ to get the base Z value from position.

Missing param type at Scripts/Model/MapFile.js :
     8 |     * @constructor
     9 |     * @param x The base X value. Use MapFile.getFileX to get the base X value from position.
    10 |     * @param y The base Y value. Use MapFile.getFileY to get the base Y value from position.
----------------------^
    11 |     * @param z The base Z value. Use MapFile.getFileZ to get the base Z value from position.
    12 |     */

Missing param type at Scripts/Model/MapFile.js :
     9 |     * @param x The base X value. Use MapFile.getFileX to get the base X value from position.
    10 |     * @param y The base Y value. Use MapFile.getFileY to get the base Y value from position.
    11 |     * @param z The base Z value. Use MapFile.getFileZ to get the base Z value from position.
----------------------^
    12 |     */
    13 |    function MapFile(x, y, z) {

Missing param type at Scripts/Model/MapFile.js :
    26 |     * Gets the MapFile's base X value.
    27 |     * @static
    28 |     * @param posx The map X position.
----------------------^
    29 |     * @returns The base X value corresponding to position posx.
    30 |     */

Missing type in @returns statement at Scripts/Model/MapFile.js :
    29 |     * @returns The base X value corresponding to position posx.
    30 |     */
    31 |    MapFile.getFileX = function (posx) {
---------------^
    32 |        console.assert(typeof posx === 'number', 'Cannot get filename X-component of a non-number.');
    33 |        return ((posx >> 8) & 0xFF);

Missing param type at Scripts/Model/MapFile.js :
    37 |     * Gets the MapFile's base Y value.
    38 |     * @static
    39 |     * @param posy The map Y position.
----------------------^
    40 |     * @returns The base Y value corresponding to position posy.
    41 |     */

Missing type in @returns statement at Scripts/Model/MapFile.js :
    40 |     * @returns The base Y value corresponding to position posy.
    41 |     */
    42 |    MapFile.getFileY = function (posy) {
---------------^
    43 |        console.assert(typeof posy === 'number', 'Cannot get filename Y-component of a non-number.');
    44 |        return ((posy >> 8) & 0xFF);

Missing param type at Scripts/Model/MapFile.js :
    48 |     * Gets the MapFile's base Z value.
    49 |     * @static
    50 |     * @param posz The map Z position.
----------------------^
    51 |     * @returns The base Z value corresponding to position posz.
    52 |     */

Missing type in @returns statement at Scripts/Model/MapFile.js :
    51 |     * @returns The base Z value corresponding to position posz.
    52 |     */
    53 |    MapFile.getFileZ = function (posz) {
---------------^
    54 |        console.assert(typeof posz === 'number', 'Cannot get filename Z-component of a non-number.');
    55 |        return ((posz >> 0) & 0xFF);

Wrong returns value at Scripts/Model/MapFileParser.js :
    45 |
    46 |        if (!map) {
    47 |            return null;
---------------------------^
    48 |        }
    49 |

Missing param type at Scripts/Model/MapFileParserResult.js :
    12 |    /**
    13 |     * Resolves the filename index for the MapFile.
    14 |     * @param fposx The MapFile base X value.
----------------------^
    15 |     * @param fposy The MapFile base Y value.
    16 |     * @param fposz The MapFile base Z value.

Missing param type at Scripts/Model/MapFileParserResult.js :
    13 |     * Resolves the filename index for the MapFile.
    14 |     * @param fposx The MapFile base X value.
    15 |     * @param fposy The MapFile base Y value.
----------------------^
    16 |     * @param fposz The MapFile base Z value.
    17 |     * @returns The unique index of that MapFile - the filename.

Missing param type at Scripts/Model/MapFileParserResult.js :
    14 |     * @param fposx The MapFile base X value.
    15 |     * @param fposy The MapFile base Y value.
    16 |     * @param fposz The MapFile base Z value.
----------------------^
    17 |     * @returns The unique index of that MapFile - the filename.
    18 |     */

Missing type in @returns statement at Scripts/Model/MapFileParserResult.js :
    18 |     */
    19 |    MapFileParserResult.resolveIndex = function (fposx, fposy, fposz) {
    20 |        return ((fposx & 0xFF) << 0) + ((fposy & 0xFF) << 8) + ((fposz & 0xF) << 16);
---------------^
    21 |    };
    22 |

Missing param type at Scripts/Model/Matrix.js :
     4 |    /**
     5 |     * Creates a new Matrix3D. Generic matrix of 3 dimensions.
     6 |     * @param x The x component of the Matrix3D.
----------------------^
     7 |     * @param y The y component of the Matrix3D.
     8 |     * @param z The z component of the Matrix3D.

Missing param type at Scripts/Model/Matrix.js :
     5 |     * Creates a new Matrix3D. Generic matrix of 3 dimensions.
     6 |     * @param x The x component of the Matrix3D.
     7 |     * @param y The y component of the Matrix3D.
----------------------^
     8 |     * @param z The z component of the Matrix3D.
     9 |     * @constructor

Missing param type at Scripts/Model/Matrix.js :
     6 |     * @param x The x component of the Matrix3D.
     7 |     * @param y The y component of the Matrix3D.
     8 |     * @param z The z component of the Matrix3D.
----------------------^
     9 |     * @constructor
    10 |     */

Missing param type at Scripts/Model/Matrix.js :
    17 |    /**
    18 |     * Sets the Matrix3D x, y, z components.
    19 |     * @param x The new X component.
----------------------^
    20 |     * @param y The new Y component.
    21 |     * @param z The new Z component.

Missing param type at Scripts/Model/Matrix.js :
    18 |     * Sets the Matrix3D x, y, z components.
    19 |     * @param x The new X component.
    20 |     * @param y The new Y component.
----------------------^
    21 |     * @param z The new Z component.
    22 |     */

Missing param type at Scripts/Model/Matrix.js :
    19 |     * @param x The new X component.
    20 |     * @param y The new Y component.
    21 |     * @param z The new Z component.
----------------------^
    22 |     */
    23 |    Matrix3D.prototype.set = function set(x, y, z) {

Missing param type at Scripts/Model/Matrix.js :
    29 |    /**
    30 |     * Sets the Matrix3D x, y, z components.
    31 |     * @param m2 The Matrix3D-like object whose x, y, z components are used.
----------------------^
    32 |     */
    33 |    Matrix3D.prototype.setEqual = function setEqual(m2) {

Missing param type at Scripts/Model/Matrix.js :
    37 |    /**
    38 |     * Shifts the Matrix3D x, y, z components.
    39 |     * @param offsetX the value to add to the x component.
----------------------^
    40 |     * @param offsetY the value to add to the y component.
    41 |     * @param offsetZ the value to add to the z component.

Missing param type at Scripts/Model/Matrix.js :
    38 |     * Shifts the Matrix3D x, y, z components.
    39 |     * @param offsetX the value to add to the x component.
    40 |     * @param offsetY the value to add to the y component.
----------------------^
    41 |     * @param offsetZ the value to add to the z component.
    42 |     * @returns the Matrix3D object.

Missing param type at Scripts/Model/Matrix.js :
    39 |     * @param offsetX the value to add to the x component.
    40 |     * @param offsetY the value to add to the y component.
    41 |     * @param offsetZ the value to add to the z component.
----------------------^
    42 |     * @returns the Matrix3D object.
    43 |     */

Missing type in @returns statement at Scripts/Model/Matrix.js :
    43 |     */
    44 |    Matrix3D.prototype.shift = function (offsetX, offsetY, offsetZ) {
    45 |        console.assert(this.x !== null && this.y !== null && this.z !== null, "Cannot shift nulled matrix.");
---------------^
    46 |        this.set(this.x + offsetX, this.y + offsetY, this.z + offsetZ);
    47 |        return this;

Missing param type at Scripts/Model/Matrix.js :
    50 |    /**
    51 |     * Compares the x, y, z components.
    52 |     * @param x the value to compare with the x component.
----------------------^
    53 |     * @param y the value to compare with the y component.
    54 |     * @param z the value to compare with the z component.

Missing param type at Scripts/Model/Matrix.js :
    51 |     * Compares the x, y, z components.
    52 |     * @param x the value to compare with the x component.
    53 |     * @param y the value to compare with the y component.
----------------------^
    54 |     * @param z the value to compare with the z component.
    55 |     * @returns true if the input x, y, z match the values of the corresponding Matrix components; false otherwise.

Missing param type at Scripts/Model/Matrix.js :
    52 |     * @param x the value to compare with the x component.
    53 |     * @param y the value to compare with the y component.
    54 |     * @param z the value to compare with the z component.
----------------------^
    55 |     * @returns true if the input x, y, z match the values of the corresponding Matrix components; false otherwise.
    56 |     */

Missing type in @returns statement at Scripts/Model/Matrix.js :
    56 |     */
    57 |    Matrix3D.prototype.equals = function equals(x, y, z) {
    58 |        return this.x === x && this.y === y && this.z === z;
---------------^
    59 |    };
    60 |

Missing param type at Scripts/Model/Matrix.js :
    61 |    /**
    62 |     * Compares the x, y, z components of the Matrix3D.
    63 |     * @param m2 the Matrix3D-like object to compare against the context Matrix3D.
----------------------^
    64 |     * @returns true if the x, y, z components of both objects match.
    65 |     */

Missing type in @returns statement at Scripts/Model/Matrix.js :
    63 |     * @param m2 the Matrix3D-like object to compare against the context Matrix3D.
    64 |     * @returns true if the x, y, z components of both objects match.
    65 |     */
---------------^
    66 |    Matrix3D.prototype.equalsMatrix = function (m2) {
    67 |        return this.equals(m2.x, m2.y, m2.z);

Missing type in @returns statement at Scripts/Model/Matrix.js :
    70 |    /**
    71 |     * Gets the string representation of the Matrix3D.
    72 |     * @returns the string representation of the Matrix3D.
---------------^
    73 |     */
    74 |    Matrix3D.prototype.toString = function () {

Missing line feed at file end at Scripts/Model/OdysseyMapIndex.js :
    34 |
    35 |    return OdysseyMapIndex;
    36 |}());
-------------^

Sentence must start with an upper case letter at Scripts/Model/OdysseyModel.js :
     2 |/*global extend, OdysseyEventDispatcher, OdysseyEventDispatchInterface, MapFileParser, MapFileParserResult, MapFile, OdysseyMapFileLoadedEvent*/
     3 |/**
     4 | * OdysseyModel.js
------------------------^
     5 | *
     6 | * Contains game information. This includes:

You started a new line with an upper case letter but previous line does not end with a period at Scripts/Model/OdysseyModel.js :
     4 | * OdysseyModel.js
     5 | *
     6 | * Contains game information. This includes:
-----------^
     7 | * - World : the world of the game.
     8 | * - Dat : a Dat context on which the map is based on.

You started a new line with an upper case letter but previous line does not end with a period at Scripts/Model/OdysseyModel.js :
     5 | *
     6 | * Contains game information. This includes:
     7 | * - World : the world of the game.
-------------^
     8 | * - Dat : a Dat context on which the map is based on.
     9 | */

Missing param type at Scripts/Model/OdysseyModel.js :
    56 |    /**
    57 |     * Parses the text of a map file.
    58 |     * @param input the text of the map file to parse.
----------------------^
    59 |     */
    60 |    OdysseyModel.prototype.parseMapDataFile = function (input) {

Missing param type at Scripts/Model/OdysseyModel.js :
    69 |    /**
    70 |     * Loads the map file at the given position.
    71 |     * @param mapX the map file's base X component. Use MapFile.getFileX to get this value.
----------------------^
    72 |     * @param mapY the map file's base Y component. Use MapFile.getFileY to get this value.
    73 |     * @param mapZ the map file's base Z component. Use MapFile.getFileZ to get this value.

Missing param type at Scripts/Model/OdysseyModel.js :
    70 |     * Loads the map file at the given position.
    71 |     * @param mapX the map file's base X component. Use MapFile.getFileX to get this value.
    72 |     * @param mapY the map file's base Y component. Use MapFile.getFileY to get this value.
----------------------^
    73 |     * @param mapZ the map file's base Z component. Use MapFile.getFileZ to get this value.
    74 |     */

Missing param type at Scripts/Model/OdysseyModel.js :
    71 |     * @param mapX the map file's base X component. Use MapFile.getFileX to get this value.
    72 |     * @param mapY the map file's base Y component. Use MapFile.getFileY to get this value.
    73 |     * @param mapZ the map file's base Z component. Use MapFile.getFileZ to get this value.
----------------------^
    74 |     */
    75 |    OdysseyModel.prototype.loadMapFile = function (mapX, mapY, mapZ) {

Missing param type at Scripts/Model/OdysseyModel.js :
    92 |    /**
    93 |     * Gets the map file at the position x, y, z.
    94 |     * @param x the position X component.
----------------------^
    95 |     * @param y the position Y component.
    96 |     * @param z the position Z component.

Missing param type at Scripts/Model/OdysseyModel.js :
    93 |     * Gets the map file at the position x, y, z.
    94 |     * @param x the position X component.
    95 |     * @param y the position Y component.
----------------------^
    96 |     * @param z the position Z component.
    97 |     * @returns the map containing the position.

Missing param type at Scripts/Model/OdysseyModel.js :
    94 |     * @param x the position X component.
    95 |     * @param y the position Y component.
    96 |     * @param z the position Z component.
----------------------^
    97 |     * @returns the map containing the position.
    98 |     */

Missing type in @returns statement at Scripts/Model/OdysseyModel.js :
    98 |     */
    99 |    OdysseyModel.prototype.getMap = function (x, y, z) {
   100 |        var mapOffset = MapFileParserResult.resolveIndex(MapFile.getFileX(x), MapFile.getFileY(y), MapFile.getFileZ(z));
---------------^
   101 |        return this.maps[mapOffset];
   102 |    };

Missing param type at Scripts/Model/OdysseyModel.js :
   104 |    /**
   105 |     * Gets the items on the tile at position x, y, z.
   106 |     * @param x the position X component.
----------------------^
   107 |     * @param y the position Y component.
   108 |     * @param z the position Z component.

Missing param type at Scripts/Model/OdysseyModel.js :
   105 |     * Gets the items on the tile at position x, y, z.
   106 |     * @param x the position X component.
   107 |     * @param y the position Y component.
----------------------^
   108 |     * @param z the position Z component.
   109 |     * @returns an array of map items.

Missing param type at Scripts/Model/OdysseyModel.js :
   106 |     * @param x the position X component.
   107 |     * @param y the position Y component.
   108 |     * @param z the position Z component.
----------------------^
   109 |     * @returns an array of map items.
   110 |     */

Missing type in @returns statement at Scripts/Model/OdysseyModel.js :
   110 |     */
   111 |    OdysseyModel.prototype.getTileItems = function (x, y, z) {
   112 |        var map = this.getMap(x, y, z), tile;
---------------^
   113 |
   114 |        if (!map) {

Missing param type at Scripts/Model/OdysseyModel.js :
   127 |    /**
   128 |     * Tests if the map is loaded at the given position.
   129 |     * @param posx the position X component.
----------------------^
   130 |     * @param posy the position Y component.
   131 |     * @param posz the position Z component.

Missing param type at Scripts/Model/OdysseyModel.js :
   128 |     * Tests if the map is loaded at the given position.
   129 |     * @param posx the position X component.
   130 |     * @param posy the position Y component.
----------------------^
   131 |     * @param posz the position Z component.
   132 |     * @returns true if the map is loaded; false otherwise.

Missing param type at Scripts/Model/OdysseyModel.js :
   129 |     * @param posx the position X component.
   130 |     * @param posy the position Y component.
   131 |     * @param posz the position Z component.
----------------------^
   132 |     * @returns true if the map is loaded; false otherwise.
   133 |     */

Missing type in @returns statement at Scripts/Model/OdysseyModel.js :
   133 |     */
   134 |    OdysseyModel.prototype.mapIsLoaded = function (posx, posy, posz) {
   135 |        var fposx, fposy, fposz, filename, resourceID;
---------------^
   136 |
   137 |        // Get the MapFile position components.

Missing param type at Scripts/Model/OdysseyModel.js :
   157 |    /**
   158 |     * Tests if a map has failed to load.
   159 |     * @param posx the position X component.
----------------------^
   160 |     * @param posy the position Y component.
   161 |     * @param posz the position Z component.

Missing param type at Scripts/Model/OdysseyModel.js :
   158 |     * Tests if a map has failed to load.
   159 |     * @param posx the position X component.
   160 |     * @param posy the position Y component.
----------------------^
   161 |     * @param posz the position Z component.
   162 |     * @returns true if the map is loaded; false otherwise.

Missing param type at Scripts/Model/OdysseyModel.js :
   159 |     * @param posx the position X component.
   160 |     * @param posy the position Y component.
   161 |     * @param posz the position Z component.
----------------------^
   162 |     * @returns true if the map is loaded; false otherwise.
   163 |     */

Missing type in @returns statement at Scripts/Model/OdysseyModel.js :
   163 |     */
   164 |    OdysseyModel.prototype.mapHasFailed = function (posx, posy, posz) {
   165 |        var fposx, fposy, fposz, filename, resourceID;
---------------^
   166 |        // Get the MapFile position components.
   167 |        fposx = MapFile.getFileX(posx);

Missing param type at Scripts/Model/OdysseyModel.js :
   184 |    /**
   185 |     * Loads the maps in the position range.
   186 |     * @param xs the start X coordinate.
----------------------^
   187 |     * @param ys the start Y coordinate.
   188 |     * @param zs the start Z coordinate.

Missing param type at Scripts/Model/OdysseyModel.js :
   185 |     * Loads the maps in the position range.
   186 |     * @param xs the start X coordinate.
   187 |     * @param ys the start Y coordinate.
----------------------^
   188 |     * @param zs the start Z coordinate.
   189 |     * @param xe the end X coordinate.

Missing param type at Scripts/Model/OdysseyModel.js :
   186 |     * @param xs the start X coordinate.
   187 |     * @param ys the start Y coordinate.
   188 |     * @param zs the start Z coordinate.
----------------------^
   189 |     * @param xe the end X coordinate.
   190 |     * @param ye the end Y coordinate.

Missing param type at Scripts/Model/OdysseyModel.js :
   187 |     * @param ys the start Y coordinate.
   188 |     * @param zs the start Z coordinate.
   189 |     * @param xe the end X coordinate.
----------------------^
   190 |     * @param ye the end Y coordinate.
   191 |     * @param ze the end Z coordinate.

Missing param type at Scripts/Model/OdysseyModel.js :
   188 |     * @param zs the start Z coordinate.
   189 |     * @param xe the end X coordinate.
   190 |     * @param ye the end Y coordinate.
----------------------^
   191 |     * @param ze the end Z coordinate.
   192 |     * @returns true if all maps are loaded; false otherwise.

Missing param type at Scripts/Model/OdysseyModel.js :
   189 |     * @param xe the end X coordinate.
   190 |     * @param ye the end Y coordinate.
   191 |     * @param ze the end Z coordinate.
----------------------^
   192 |     * @returns true if all maps are loaded; false otherwise.
   193 |     */

Missing type in @returns statement at Scripts/Model/OdysseyModel.js :
   196 |
   197 |        // Get the base values for the maps.
   198 |        xs = MapFile.getFileX(xs);
---------------^
   199 |        ys = MapFile.getFileY(ys);
   200 |        zs = MapFile.getFileZ(zs);

Missing param type at Scripts/Model/OdysseyModel.js :
   218 |    /**
   219 |     * Tests if maps are loaded in the position range.
   220 |     * @param xs the start X coordinate.
----------------------^
   221 |     * @param ys the start Y coordinate.
   222 |     * @param zs the start Z coordinate.

Missing param type at Scripts/Model/OdysseyModel.js :
   219 |     * Tests if maps are loaded in the position range.
   220 |     * @param xs the start X coordinate.
   221 |     * @param ys the start Y coordinate.
----------------------^
   222 |     * @param zs the start Z coordinate.
   223 |     * @param xe the end X coordinate.

Missing param type at Scripts/Model/OdysseyModel.js :
   220 |     * @param xs the start X coordinate.
   221 |     * @param ys the start Y coordinate.
   222 |     * @param zs the start Z coordinate.
----------------------^
   223 |     * @param xe the end X coordinate.
   224 |     * @param ye the end Y coordinate.

Missing param type at Scripts/Model/OdysseyModel.js :
   221 |     * @param ys the start Y coordinate.
   222 |     * @param zs the start Z coordinate.
   223 |     * @param xe the end X coordinate.
----------------------^
   224 |     * @param ye the end Y coordinate.
   225 |     * @param ze the end Z coordinate.

Missing param type at Scripts/Model/OdysseyModel.js :
   222 |     * @param zs the start Z coordinate.
   223 |     * @param xe the end X coordinate.
   224 |     * @param ye the end Y coordinate.
----------------------^
   225 |     * @param ze the end Z coordinate.
   226 |     * @returns true if all maps are loaded; false otherwise.

Missing param type at Scripts/Model/OdysseyModel.js :
   223 |     * @param xe the end X coordinate.
   224 |     * @param ye the end Y coordinate.
   225 |     * @param ze the end Z coordinate.
----------------------^
   226 |     * @returns true if all maps are loaded; false otherwise.
   227 |     */

Missing type in @returns statement at Scripts/Model/OdysseyModel.js :
   230 |
   231 |        // Get the base values for the maps.
   232 |        xs = MapFile.getFileX(xs);
---------------^
   233 |        ys = MapFile.getFileY(ys);
   234 |        zs = MapFile.getFileZ(zs);

Missing param type at Scripts/Model/OdysseyModel.js :
   256 |    /**
   257 |     * Sets the dat context to be used for the model.
   258 |     * @param dat the dat context to be used for the model.
----------------------^
   259 |     */
   260 |    OdysseyModel.prototype.setDat = function (dat) {

Missing type in @returns statement at Scripts/Model/OdysseyModel.js :
   264 |    /**
   265 |     * Gets the dat context used by the model.
   266 |     * @returns the dat context used by the model.
---------------^
   267 |     */
   268 |    OdysseyModel.prototype.getDat = function () {

Missing param type at Scripts/Model/OdysseyModel.js :
   272 |    /**
   273 |     * Sets the world of the model.
   274 |     * @param world the world to use for the model.
----------------------^
   275 |     */
   276 |    OdysseyModel.prototype.setWorld = function (world) {

Missing type in @returns statement at Scripts/Model/OdysseyModel.js :
   280 |    /**
   281 |     * Gets the world of the model.
   282 |     * @returns the world of the model, or null if one is not set.
---------------^
   283 |     */
   284 |    OdysseyModel.prototype.getWorld = function () {

Missing param type at Scripts/Model/OdysseyModel.js :
   288 |    /**
   289 |     * Sets the geography object of the model.
   290 |     * @param geography the geography object to use for the model.
----------------------^
   291 |     */
   292 |    OdysseyModel.prototype.setGeography = function (geography) {

Missing type in @returns statement at Scripts/Model/OdysseyModel.js :
   296 |    /**
   297 |     * Gets the geography object of the model.
   298 |     * @returns the geography object of the model, or null if one is not set.
---------------^
   299 |     */
   300 |    OdysseyModel.prototype.getGeography = function () {

Missing param type at Scripts/Model/OdysseyModel.js :
   304 |    /**
   305 |     * Sets the spawns of the model world.
   306 |     * @param spawns the spawns of the model world.
----------------------^
   307 |     */
   308 |    OdysseyModel.prototype.setWorldSpawns = function (spawns) {

Missing type in @returns statement at Scripts/Model/OdysseyModel.js :
   312 |    /**
   313 |     * Gets the spawns of the model world.
   314 |     * @returns the spawns object of the model world, or null if one is not set.
---------------^
   315 |     */
   316 |    OdysseyModel.prototype.getWorldSpawns = function () {

Expected mapIndex but got the at Scripts/Model/OdysseyModel.js :
   320 |    /**
   321 |     * Sets the map index of the model.
   322 |     * @param {OdysseyMapIndex} the map index object to use for the model.
----------------------------------------^
   323 |     */
   324 |    OdysseyModel.prototype.setMapIndex = function (mapIndex) {

Missing line feed at file end at Scripts/Model/OdysseyModelAttributor.js :
    21 |
    22 |    return OdysseyModelAttributor;
    23 |}());
-------------^

Sentence must start with an upper case letter at Scripts/Model/OdysseyWorld.js :
     1 |/*global extend, OdysseyEventDispatchInterface, OdysseyEventDispatcher*/
     2 |/**
     3 | * OdysseyWorld.js
------------------------^
     4 | *
     5 | * Contains map information.

You started a new line with an upper case letter but previous line does not end with a period at Scripts/Model/OdysseyWorld.js :
     3 | * OdysseyWorld.js
     4 | *
     5 | * Contains map information.
-----------^
     6 | */
     7 |var OdysseyWorld = (function () {

Illegal space after opening bracket at Scripts/Model/ResourceManagerFile.js :
    25 |    }
    26 |    extend(ResourceManagerFile.prototype, new OdysseyEventDispatchInterface());
    27 |    ResourceManagerFile.imageFormats = [ ".png" ];
------------------------------------------------^
    28 |    /** Loaded flag. @const */
    29 |    ResourceManagerFile.FLAG_LOADED = 1;

Illegal space before closing bracket at Scripts/Model/ResourceManagerFile.js :
    25 |    }
    26 |    extend(ResourceManagerFile.prototype, new OdysseyEventDispatchInterface());
    27 |    ResourceManagerFile.imageFormats = [ ".png" ];
-------------------------------------------------------^
    28 |    /** Loaded flag. @const */
    29 |    ResourceManagerFile.FLAG_LOADED = 1;

Missing param type at Scripts/Model/ResourceManagerFile.js :
    72 |    /**
    73 |     * Creates a new ResourceManagerFile from the source.
    74 |     * @param src the source of the file.
----------------------^
    75 |     */
    76 |    ResourceManagerFile.load = function (src) {

Function is missing documentation for parameter `src`. at Scripts/Model/ResourceManagerFile.js :
   163 |     * Loads the ResourceManagerFile.
   164 |     */
   165 |    ResourceManagerFile.prototype.load = function (src) {
-------------------------------------------------^
   166 |        var ext = src.slice(-4);
   167 |        if (ResourceManagerFile.imageFormats.indexOf(ext) !== -1) {

Function is missing documentation for parameter `data`. at Scripts/Model/ResourceManagerFile.js :
   220 |         * Handles the successful loading of the binary file.
   221 |         */
   222 |        function handleLoadSuccess(data) {
----------------^
   223 |            ctx.setContents(data);
   224 |            ctx.setIsLoading(false);

Missing line feed at file end at Scripts/Odyssey.js :
    50 |
    51 |    return Odyssey;
    52 |}());
-------------^

Function is missing documentation for parameter `$`. at Scripts/View/DelayLoad.js :
     5 | * after DOM is ready.
     6 | */
     7 |(function ($) {
---------^
     8 |    "use strict";
     9 |    $(window).load(function () {

Missing line feed at file end at Scripts/View/DelayLoad.js :
    12 |        });
    13 |    });
    14 |}(jQuery));
-------------------^

Missing param type at Scripts/View/OdysseyMinimap.js :
    33 |    /**
    34 |     * Draws a pixel of a color at position on the canvas.
    35 |     * @param rgba the color as an RGBA integer (0xRRGGBBAA).
----------------------^
    36 |     * @param x the X coordinate on the canvas.
    37 |     * @param y the Y coordinate on the canvas.

Missing param type at Scripts/View/OdysseyMinimap.js :
    34 |     * Draws a pixel of a color at position on the canvas.
    35 |     * @param rgba the color as an RGBA integer (0xRRGGBBAA).
    36 |     * @param x the X coordinate on the canvas.
----------------------^
    37 |     * @param y the Y coordinate on the canvas.
    38 |     */

Missing param type at Scripts/View/OdysseyMinimap.js :
    35 |     * @param rgba the color as an RGBA integer (0xRRGGBBAA).
    36 |     * @param x the X coordinate on the canvas.
    37 |     * @param y the Y coordinate on the canvas.
----------------------^
    38 |     */
    39 |    OdysseyMinimap.prototype.drawPixel = function (rgba, x, y) {

Missing param type at Scripts/View/OdysseyMinimap.js :
    49 |    /**
    50 |     * Sets the minimap canvas.
    51 |     * @param canvas the canvas to use for the minimap.
----------------------^
    52 |     */
    53 |    OdysseyMinimap.prototype.setCanvas = function (canvas) {

Function is missing documentation for parameter `model`. at Scripts/View/OdysseyMinimap.js :
    59 |     * Re-renders the minimap.
    60 |     */
    61 |    OdysseyMinimap.prototype.update = function (model) {
----------------------------------------------^
    62 |        var xs, ys, zs, items, i, itemCount, itemMapColor, dx, dy;
    63 |        xs = this.position.x - 63;

Expected src but got the at Scripts/View/OdysseySpriteIndex.js :
    61 |     * and thus unreliable. Use the isLoaded field to determine if it
    62 |     * is loaded and safe to use, or the SpriteIndexLoaded event.
    63 |     * @param {string} the source file loation.
-------------------------------^
    64 |     * @returns {OdysseySpriteIndex} the loaded sprite index object.
    65 |     */

Missing line feed at file end at Scripts/View/OdysseySpriteIndex.js :
    81 |
    82 |    return OdysseySpriteIndex;
    83 |}(jQuery));
-------------------^

Sentence must start with an upper case letter at Scripts/View/OdysseyTileMap.js :
    96 |
    97 |    /**
    98 |     * Proxy method for stop updating a tile map. this method returns a function
----------------------------------------------------------^
    99 |     * that can safely be passed as event listeners with a custom context.
   100 |     * @param {OdysseyView} instance the view to stop updating.

Missing param type at Scripts/View/OdysseyTileMap.js :
   134 |    /**
   135 |     * Adjusts the canvases for changes in zoom level.
   136 |     * @param e the Zoom event.
----------------------^
   137 |     */
   138 |    OdysseyTileMap.prototype.adjustForZoomChange = function (e) {

Missing param type at Scripts/View/OdysseyTileMap.js :
   168 |    /**
   169 |     * Handles updating the tile map display.
   170 |     * @param model the model to use for updating.
----------------------^
   171 |     */
   172 |    OdysseyTileMap.prototype.update = function () {

Missing param type at Scripts/View/OdysseyTileMap.js :
   179 |    /**
   180 |     * Sets the Odyssey viewport.
   181 |     * @param element the DOM element to use as a viewport.
----------------------^
   182 |     */
   183 |    OdysseyTileMap.prototype.setViewport = function (element) {

Sentence must start with an upper case letter at Scripts/View/OdysseyTileMap.js :
   187 |    /**
   188 |     * Sets the current map position. This method should be used
   189 |     * instead of position.set(x, y, z) because it registers an event
-----------------------------------^
   190 |     * for listeners.
   191 |     * @param x the new x-coordinate.

Missing param type at Scripts/View/OdysseyTileMap.js :
   189 |     * instead of position.set(x, y, z) because it registers an event
   190 |     * for listeners.
   191 |     * @param x the new x-coordinate.
----------------------^
   192 |     * @param y the new y-coordinate.
   193 |     * @param z the new z-coordinate.

Missing param type at Scripts/View/OdysseyTileMap.js :
   190 |     * for listeners.
   191 |     * @param x the new x-coordinate.
   192 |     * @param y the new y-coordinate.
----------------------^
   193 |     * @param z the new z-coordinate.
   194 |     */

Missing param type at Scripts/View/OdysseyTileMap.js :
   191 |     * @param x the new x-coordinate.
   192 |     * @param y the new y-coordinate.
   193 |     * @param z the new z-coordinate.
----------------------^
   194 |     */
   195 |    OdysseyTileMap.prototype.setPosition = function (x, y, z) {

Missing type in @returns statement at Scripts/View/OdysseyTileMap.js :
   200 |    /**
   201 |     * Gets the map position.
   202 |     * @returns the map position.
---------------^
   203 |     */
   204 |    OdysseyTileMap.prototype.getPosition = function () {

Sentence must start with an upper case letter at Scripts/View/OdysseyTileMap.js :
   208 |    /**
   209 |     * Sets the current map zoom state. This method should be used
   210 |     * instead of zoom.set(zoom) because it registers an event for
-------------------------------^
   211 |     * listeners.
   212 |     * @param zoom the new zoom state.

Missing param type at Scripts/View/OdysseyTileMap.js :
   210 |     * instead of zoom.set(zoom) because it registers an event for
   211 |     * listeners.
   212 |     * @param zoom the new zoom state.
----------------------^
   213 |     */
   214 |    OdysseyTileMap.prototype.setZoom = function (zoom) {

You started a new line with an upper case letter but previous line does not end with a period at Scripts/View/OdysseyTileMap.js :
   220 |     * Sets the size of the display. The canvases should have
   221 |     * sizes corresponding to 32 times the size of the
   222 |     * OdysseyTileMap, plus 32x32 to resolve clipping for 64x64px
---------------^
   223 |     * sprites.
   224 |     * @param sx the amount of tiles in the X direction on the viewport and each canvas.

Missing param type at Scripts/View/OdysseyTileMap.js :
   222 |     * OdysseyTileMap, plus 32x32 to resolve clipping for 64x64px
   223 |     * sprites.
   224 |     * @param sx the amount of tiles in the X direction on the viewport and each canvas.
----------------------^
   225 |     * @param sy the amount of tiles in the Y direction on the viewport and each canvas.
   226 |     */

Missing param type at Scripts/View/OdysseyTileMap.js :
   223 |     * sprites.
   224 |     * @param sx the amount of tiles in the X direction on the viewport and each canvas.
   225 |     * @param sy the amount of tiles in the Y direction on the viewport and each canvas.
----------------------^
   226 |     */
   227 |    OdysseyTileMap.prototype.setSize = function (sx, sy) {

Missing param type at Scripts/View/OdysseyTileMap.js :
   232 |    /**
   233 |     * Calculates the canvas section index based on the map position.
   234 |     * @param posX a map position X component.
----------------------^
   235 |     * @param posY a map position Y component.
   236 |     * @returns the canvas index that should contain (posX, posY).

Missing param type at Scripts/View/OdysseyTileMap.js :
   233 |     * Calculates the canvas section index based on the map position.
   234 |     * @param posX a map position X component.
   235 |     * @param posY a map position Y component.
----------------------^
   236 |     * @returns the canvas index that should contain (posX, posY).
   237 |     */

Missing type in @returns statement at Scripts/View/OdysseyTileMap.js :
   236 |     * @returns the canvas index that should contain (posX, posY).
   237 |     */
   238 |    OdysseyTileMap.prototype.getCanvasSectionIndex = function (posX, posY) {
---------------^
   239 |        var dxu = (Math.floor(((posX - (posX % this.sizeX)) - (this.position.x - (this.position.x % this.sizeX))) / this.sizeX)),
   240 |            dyu = (Math.floor(((posY - (posY % this.sizeY)) - (this.position.y - (this.position.y % this.sizeY))) / this.sizeY)),

Missing param type at Scripts/View/OdysseyTileMap.js :
   249 |    /**
   250 |     * Gets the canvas section corresponding to the input position components.
   251 |     * @param posx the position X component of the canvas section.
----------------------^
   252 |     * @param posy the position Y component of the canvas section.
   253 |     */

Missing param type at Scripts/View/OdysseyTileMap.js :
   250 |     * Gets the canvas section corresponding to the input position components.
   251 |     * @param posx the position X component of the canvas section.
   252 |     * @param posy the position Y component of the canvas section.
----------------------^
   253 |     */
   254 |    OdysseyTileMap.prototype.getCanvasSection = function (posx, posy) {

Missing param type at Scripts/View/OdysseyTileMap.js :
   267 |     * 2. Items can have "hangable" sprites corresponding to the properties of an underlying wall.
   268 |     * 3. Items can have "animation" sprites. We discard animations.
   269 |     * @param itemId the item ID.
----------------------^
   270 |     * @param posx the position X component of the item.
   271 |     * @param posy the position Y component of the item.

Missing param type at Scripts/View/OdysseyTileMap.js :
   268 |     * 3. Items can have "animation" sprites. We discard animations.
   269 |     * @param itemId the item ID.
   270 |     * @param posx the position X component of the item.
----------------------^
   271 |     * @param posy the position Y component of the item.
   272 |     * @param posz the position Z component of the item.

Missing param type at Scripts/View/OdysseyTileMap.js :
   269 |     * @param itemId the item ID.
   270 |     * @param posx the position X component of the item.
   271 |     * @param posy the position Y component of the item.
----------------------^
   272 |     * @param posz the position Z component of the item.
   273 |     * @param hasVertical whether or not the tile has a vertical wall on it.

Missing param type at Scripts/View/OdysseyTileMap.js :
   270 |     * @param posx the position X component of the item.
   271 |     * @param posy the position Y component of the item.
   272 |     * @param posz the position Z component of the item.
----------------------^
   273 |     * @param hasVertical whether or not the tile has a vertical wall on it.
   274 |     * @param hasHorizontal whether or not the tile has a horizontal wall on it.

Missing param type at Scripts/View/OdysseyTileMap.js :
   271 |     * @param posy the position Y component of the item.
   272 |     * @param posz the position Z component of the item.
   273 |     * @param hasVertical whether or not the tile has a vertical wall on it.
----------------------^
   274 |     * @param hasHorizontal whether or not the tile has a horizontal wall on it.
   275 |     */

Missing param type at Scripts/View/OdysseyTileMap.js :
   272 |     * @param posz the position Z component of the item.
   273 |     * @param hasVertical whether or not the tile has a vertical wall on it.
   274 |     * @param hasHorizontal whether or not the tile has a horizontal wall on it.
----------------------^
   275 |     */
   276 |    OdysseyTileMap.prototype.getSpriteID = function (itemId, posx, posy, posz, hasVertical, hasHorizontal) {

Missing param type at Scripts/View/OdysseyTileMap.js :
   295 |    /**
   296 |     * Gets the sprite file index containing the sprite ID.
   297 |     * @param sprID the ID of the sprite to search for.
----------------------^
   298 |     * @returns the index of the spritesheet containing the sprite, or -1 if not found.
   299 |     */

Missing type in @returns statement at Scripts/View/OdysseyTileMap.js :
   297 |     * @param sprID the ID of the sprite to search for.
   298 |     * @returns the index of the spritesheet containing the sprite, or -1 if not found.
   299 |     */
---------------^
   300 |    OdysseyTileMap.prototype.getSpriteFileID = function (sprID) {
   301 |        var spritesheets = this.view.getSpriteIndex().data, i, len = spritesheets.length, sheet;

Missing param type at Scripts/View/OdysseyTileMap.js :
   312 |    /**
   313 |     * Gets the sprite file containing a sprite.
   314 |     * @param sprID the ID of the sprite to search for.
----------------------^
   315 |     * @returns the spritesheet containing the sprite.
   316 |     */

Missing type in @returns statement at Scripts/View/OdysseyTileMap.js :
   314 |     * @param sprID the ID of the sprite to search for.
   315 |     * @returns the spritesheet containing the sprite.
   316 |     */
---------------^
   317 |    OdysseyTileMap.prototype.getSpriteFileContaining = function (sprID) {
   318 |        var spritesheets = this.view.getSpriteIndex().data;

Missing param type at Scripts/View/OdysseyTileMap.js :
   322 |    /**
   323 |     * Gets the sprite's offset X component.
   324 |     * @param sprID the ID of the sprite.
----------------------^
   325 |     * @returns the sprite's offset X component.
   326 |     */

Missing type in @returns statement at Scripts/View/OdysseyTileMap.js :
   324 |     * @param sprID the ID of the sprite.
   325 |     * @returns the sprite's offset X component.
   326 |     */
---------------^
   327 |    OdysseyTileMap.prototype.getSpriteOffsetX = function (sprID) {
   328 |        var sheet = this.getSpriteFileContaining(sprID),

Missing param type at Scripts/View/OdysseyTileMap.js :
   337 |    /**
   338 |     * Gets the sprite's offset Y component.
   339 |     * @param sprID the ID of the sprite.
----------------------^
   340 |     * @returns the sprite's offset Y component.
   341 |     */

Missing type in @returns statement at Scripts/View/OdysseyTileMap.js :
   339 |     * @param sprID the ID of the sprite.
   340 |     * @returns the sprite's offset Y component.
   341 |     */
---------------^
   342 |    OdysseyTileMap.prototype.getSpriteOffsetY = function (sprID) {
   343 |        var sheet = this.getSpriteFileContaining(sprID),

Missing param type at Scripts/View/OdysseyTileMap.js :
   351 |    /**
   352 |     * Gets the sprite's size X component.
   353 |     * @param sprID the ID of the sprite.
----------------------^
   354 |     * @returns the sprite's size X component.
   355 |     */

Missing type in @returns statement at Scripts/View/OdysseyTileMap.js :
   353 |     * @param sprID the ID of the sprite.
   354 |     * @returns the sprite's size X component.
   355 |     */
---------------^
   356 |    OdysseyTileMap.prototype.getSpriteSizeX = function (sprID) {
   357 |        var sheet = this.getSpriteFileContaining(sprID);

Missing param type at Scripts/View/OdysseyTileMap.js :
   361 |    /**
   362 |     * Gets the sprite's size Y component.
   363 |     * @param sprID the ID of the sprite.
----------------------^
   364 |     * @returns the sprite's size Y component.
   365 |     */

Missing type in @returns statement at Scripts/View/OdysseyTileMap.js :
   363 |     * @param sprID the ID of the sprite.
   364 |     * @returns the sprite's size Y component.
   365 |     */
---------------^
   366 |    OdysseyTileMap.prototype.getSpriteSizeY = function (sprID) {
   367 |        var sheet = this.getSpriteFileContaining(sprID);

Missing param type at Scripts/View/OdysseyTileMap.js :
   371 |    /**
   372 |     * Sets a canvas for rendering the map.
   373 |     * @param index the index of the canvas.
----------------------^
   374 |     * @param canvas the DOM canvas element.
   375 |     */

Missing param type at Scripts/View/OdysseyTileMap.js :
   372 |     * Sets a canvas for rendering the map.
   373 |     * @param index the index of the canvas.
   374 |     * @param canvas the DOM canvas element.
----------------------^
   375 |     */
   376 |    OdysseyTileMap.prototype.setCanvas = function (index, canvas) {

Missing param type at Scripts/View/OdysseyTileMap.js :
   380 |    /**
   381 |     * Sets a canvas for rendering the overlay.
   382 |     * @param index the index of the canvas.
----------------------^
   383 |     * @param canvas the DOM canvas element.
   384 |     */

Missing param type at Scripts/View/OdysseyTileMap.js :
   381 |     * Sets a canvas for rendering the overlay.
   382 |     * @param index the index of the canvas.
   383 |     * @param canvas the DOM canvas element.
----------------------^
   384 |     */
   385 |    OdysseyTileMap.prototype.setOverlayCanvas = function (index, canvas) {

Missing param type at Scripts/View/OdysseyTileMap.js :
   389 |    /**
   390 |     * Gets the canvas at the specified index.
   391 |     * @param index the index of the canvas to get.
----------------------^
   392 |     * @returns the canvas corresponding to the name.
   393 |     */

Missing type in @returns statement at Scripts/View/OdysseyTileMap.js :
   391 |     * @param index the index of the canvas to get.
   392 |     * @returns the canvas corresponding to the name.
   393 |     */
---------------^
   394 |    OdysseyTileMap.prototype.getCanvas = function (index) {
   395 |        return this.canvases[index];

Missing param type at Scripts/View/OdysseyTileMap.js :
   398 |    /**
   399 |     * Renders a sprite on the canvas.
   400 |     * @param sprID the sprite ID.
----------------------^
   401 |     * @param x the X component of the map tile's position.
   402 |     * @param y the Y component of the map tile's position.

Missing param type at Scripts/View/OdysseyTileMap.js :
   399 |     * Renders a sprite on the canvas.
   400 |     * @param sprID the sprite ID.
   401 |     * @param x the X component of the map tile's position.
----------------------^
   402 |     * @param y the Y component of the map tile's position.
   403 |     * @param z the Z component of the map tile's position.

Missing param type at Scripts/View/OdysseyTileMap.js :
   400 |     * @param sprID the sprite ID.
   401 |     * @param x the X component of the map tile's position.
   402 |     * @param y the Y component of the map tile's position.
----------------------^
   403 |     * @param z the Z component of the map tile's position.
   404 |     * @param ox the offset X of the item.

Missing param type at Scripts/View/OdysseyTileMap.js :
   401 |     * @param x the X component of the map tile's position.
   402 |     * @param y the Y component of the map tile's position.
   403 |     * @param z the Z component of the map tile's position.
----------------------^
   404 |     * @param ox the offset X of the item.
   405 |     * @param oy the offset Y of the item.

Missing param type at Scripts/View/OdysseyTileMap.js :
   402 |     * @param y the Y component of the map tile's position.
   403 |     * @param z the Z component of the map tile's position.
   404 |     * @param ox the offset X of the item.
----------------------^
   405 |     * @param oy the offset Y of the item.
   406 |     * @param height the height of the tile beneath the item.

Missing param type at Scripts/View/OdysseyTileMap.js :
   403 |     * @param z the Z component of the map tile's position.
   404 |     * @param ox the offset X of the item.
   405 |     * @param oy the offset Y of the item.
----------------------^
   406 |     * @param height the height of the tile beneath the item.
   407 |     * @returns true if the render was successful; false otherwise.

Missing param type at Scripts/View/OdysseyTileMap.js :
   404 |     * @param ox the offset X of the item.
   405 |     * @param oy the offset Y of the item.
   406 |     * @param height the height of the tile beneath the item.
----------------------^
   407 |     * @returns true if the render was successful; false otherwise.
   408 |     */

Missing type in @returns statement at Scripts/View/OdysseyTileMap.js :
   412 |        spritesheet = this.getSpriteFileID(sprID);
   413 |        // TODO is this check necessary?
   414 |        //if (!(this.view.getResourceManager().isLoaded(spritesheet) || this.view.getResourceManager().isLoading(spritesheet))) {
---------------^
   415 |        if (!(this.view.getResourceManager().isLoaded(spritesheet))) {
   416 |            this.view.getResourceManager().load(spritesheet);

Missing param type at Scripts/View/OdysseyTileMap.js :
   447 |    /**
   448 |     * Renders an item on the canvas.
   449 |     * @param itemID the ID of the item to draw.
----------------------^
   450 |     * @param x the X component of the map tile's position.
   451 |     * @param y the Y component of the map tile's position.

Missing param type at Scripts/View/OdysseyTileMap.js :
   448 |     * Renders an item on the canvas.
   449 |     * @param itemID the ID of the item to draw.
   450 |     * @param x the X component of the map tile's position.
----------------------^
   451 |     * @param y the Y component of the map tile's position.
   452 |     * @param z the Z component of the map tile's position.

Missing param type at Scripts/View/OdysseyTileMap.js :
   449 |     * @param itemID the ID of the item to draw.
   450 |     * @param x the X component of the map tile's position.
   451 |     * @param y the Y component of the map tile's position.
----------------------^
   452 |     * @param z the Z component of the map tile's position.
   453 |     * @param ox the offset X of the item.

Missing param type at Scripts/View/OdysseyTileMap.js :
   450 |     * @param x the X component of the map tile's position.
   451 |     * @param y the Y component of the map tile's position.
   452 |     * @param z the Z component of the map tile's position.
----------------------^
   453 |     * @param ox the offset X of the item.
   454 |     * @param oy the offset Y of the item.

Missing param type at Scripts/View/OdysseyTileMap.js :
   451 |     * @param y the Y component of the map tile's position.
   452 |     * @param z the Z component of the map tile's position.
   453 |     * @param ox the offset X of the item.
----------------------^
   454 |     * @param oy the offset Y of the item.
   455 |     * @param height the height of the tile beneath the item.

Missing param type at Scripts/View/OdysseyTileMap.js :
   452 |     * @param z the Z component of the map tile's position.
   453 |     * @param ox the offset X of the item.
   454 |     * @param oy the offset Y of the item.
----------------------^
   455 |     * @param height the height of the tile beneath the item.
   456 |     * @param hasVertical whether or not the tile has a vertical wall beneath it.

Missing param type at Scripts/View/OdysseyTileMap.js :
   453 |     * @param ox the offset X of the item.
   454 |     * @param oy the offset Y of the item.
   455 |     * @param height the height of the tile beneath the item.
----------------------^
   456 |     * @param hasVertical whether or not the tile has a vertical wall beneath it.
   457 |     * @param hasHorizontal whether or not the tile has a horizontal wall beneath it.

Missing param type at Scripts/View/OdysseyTileMap.js :
   454 |     * @param oy the offset Y of the item.
   455 |     * @param height the height of the tile beneath the item.
   456 |     * @param hasVertical whether or not the tile has a vertical wall beneath it.
----------------------^
   457 |     * @param hasHorizontal whether or not the tile has a horizontal wall beneath it.
   458 |     * @returns true if the render was successful; false otherwise.

Missing param type at Scripts/View/OdysseyTileMap.js :
   455 |     * @param height the height of the tile beneath the item.
   456 |     * @param hasVertical whether or not the tile has a vertical wall beneath it.
   457 |     * @param hasHorizontal whether or not the tile has a horizontal wall beneath it.
----------------------^
   458 |     * @returns true if the render was successful; false otherwise.
   459 |     */

Missing type in @returns statement at Scripts/View/OdysseyTileMap.js :
   465 |        }
   466 |        return success;
   467 |    };
---------------^
   468 |
   469 |    /**

Missing param type at Scripts/View/OdysseyTileMap.js :
   469 |    /**
   470 |     * Creates a new array of items, sorted according to the provided Dat context.
   471 |     * @param items the array of map items to sort.
----------------------^
   472 |     * @param Dat the Dat context to sort according to.
   473 |     * @static

Missing param type at Scripts/View/OdysseyTileMap.js :
   470 |     * Creates a new array of items, sorted according to the provided Dat context.
   471 |     * @param items the array of map items to sort.
   472 |     * @param Dat the Dat context to sort according to.
----------------------^
   473 |     * @static
   474 |     */

Missing param type at Scripts/View/OdysseyTileMap.js :
   494 |    /**
   495 |     * Renders a tile.
   496 |     * @param x the map position X component.
----------------------^
   497 |     * @param y the map position Y component.
   498 |     * @param z the map position Z component.

Missing param type at Scripts/View/OdysseyTileMap.js :
   495 |     * Renders a tile.
   496 |     * @param x the map position X component.
   497 |     * @param y the map position Y component.
----------------------^
   498 |     * @param z the map position Z component.
   499 |     * @returns true if the whole tile was rendered; false otherwise.

Missing param type at Scripts/View/OdysseyTileMap.js :
   496 |     * @param x the map position X component.
   497 |     * @param y the map position Y component.
   498 |     * @param z the map position Z component.
----------------------^
   499 |     * @returns true if the whole tile was rendered; false otherwise.
   500 |     */

Missing type in @returns statement at Scripts/View/OdysseyTileMap.js :
   500 |     */
   501 |    OdysseyTileMap.prototype.renderTile = function (x, y, z) {
   502 |        var items = this.view.getModel().getTileItems(x, y, z),
---------------^
   503 |            renderItems,
   504 |            i,

Missing type in @returns statement at Scripts/View/OdysseyTileMap.js :
   572 |    /**
   573 |     * Refreshes the whole viewport. This is used when the sprites are known to be loaded.
   574 |     * @returns true if the refresh was successful; false otherwise.
---------------^
   575 |     */
   576 |    OdysseyTileMap.prototype.refresh = function () {

Missing type in @returns statement at Scripts/View/OdysseyTileMap.js :
   614 |     * tiles pre-rendered. If rendering to the canvas is necessary, tiles
   615 |     * will be selectively rendered to the canvas.
   616 |     * @returns true if rendering was successful; false otherwise.
---------------^
   617 |     */
   618 |    OdysseyTileMap.prototype.render = function () {

Missing type in @returns statement at Scripts/View/OdysseyTileMap.js :
   657 |     * Selectively renders tiles that have failed to render
   658 |     * in previous rendering attempts.
   659 |     * @returns false if rendering failed or if there was nothing to render.
---------------^
   660 |     */
   661 |    OdysseyTileMap.prototype.renderSelective = function () {

Missing param type at Scripts/View/OdysseyTileMap.js :
   696 |     * Adds a tile to the list of tiles that failed to render,
   697 |     * allowing for the selective rendering of failed tiles.
   698 |     * @param x the map position X component.
----------------------^
   699 |     * @param y the map position Y component.
   700 |     * @param z the map position Z component.

Missing param type at Scripts/View/OdysseyTileMap.js :
   697 |     * allowing for the selective rendering of failed tiles.
   698 |     * @param x the map position X component.
   699 |     * @param y the map position Y component.
----------------------^
   700 |     * @param z the map position Z component.
   701 |     */

Missing param type at Scripts/View/OdysseyTileMap.js :
   698 |     * @param x the map position X component.
   699 |     * @param y the map position Y component.
   700 |     * @param z the map position Z component.
----------------------^
   701 |     */
   702 |    OdysseyTileMap.prototype.setRenderFailed = function (x, y, z) {

Sentence must start with an upper case letter at Scripts/View/OdysseyView.js :
     1 |/*global OdysseyEventDispatcher, OdysseyEventDispatchInterface*/
     2 |/**
     3 | * OdysseyModel.js
------------------------^
     4 | *
     5 | * Contains UI components. This includes:

You started a new line with an upper case letter but previous line does not end with a period at Scripts/View/OdysseyView.js :
     3 | * OdysseyModel.js
     4 | *
     5 | * Contains UI components. This includes:
-----------^
     6 | * - Minimap : the minimap of the model.
     7 | * - WorldMap : the world map of the model.

You started a new line with an upper case letter but previous line does not end with a period at Scripts/View/OdysseyView.js :
     4 | *
     5 | * Contains UI components. This includes:
     6 | * - Minimap : the minimap of the model.
-------------^
     7 | * - WorldMap : the world map of the model.
     8 | * - TileMap : the tile map of the model.

Missing param type at Scripts/View/OdysseyView.js :
    67 |    /**
    68 |     * Sets the minimap of the view.
    69 |     * @param minimap the minimap for the view.
----------------------^
    70 |     */
    71 |    OdysseyView.prototype.setMinimap = function (minimap) {

Missing type in @returns statement at Scripts/View/OdysseyView.js :
    76 |    /**
    77 |     * Gets the minimap of the view.
    78 |     * @returns the minimap of the view, or null if one is not set.
---------------^
    79 |     */
    80 |    OdysseyView.prototype.getMinimap = function () {

Missing param type at Scripts/View/OdysseyView.js :
    84 |    /**
    85 |     * Sets the world map of the view.
    86 |     * @param worldMap the world map for the view.
----------------------^
    87 |     */
    88 |    OdysseyView.prototype.setWorldMap = function (worldMap) {

Missing type in @returns statement at Scripts/View/OdysseyView.js :
    93 |    /**
    94 |     * Gets the world map of the view.
    95 |     * @returns the world map of the view, or null if one is not set.
---------------^
    96 |     */
    97 |    OdysseyView.prototype.getWorldMap = function () {

Missing param type at Scripts/View/OdysseyView.js :
   101 |    /**
   102 |     * Sets the tile map of the view.
   103 |     * @param tileMap the tile map for the view.
----------------------^
   104 |     */
   105 |    OdysseyView.prototype.setTileMap = function (tileMap) {

Missing type in @returns statement at Scripts/View/OdysseyView.js :
   110 |    /**
   111 |     * Gets the tile map of the view.
   112 |     * @returns the tile map for the view, or null if one is not set.
---------------^
   113 |     */
   114 |    OdysseyView.prototype.getTileMap = function () {

Missing param type at Scripts/View/OdysseyView.js :
   118 |    /**
   119 |     * Sets the tile info view component.
   120 |     * @param tileInfo the tile info view component.
----------------------^
   121 |     */
   122 |    OdysseyView.prototype.setTileInfo = function (tileInfo) {

Missing type in @returns statement at Scripts/View/OdysseyView.js :
   127 |    /**
   128 |     * Gets the tile info view component.
   129 |     * @returns the tile info view component.
---------------^
   130 |     */
   131 |    OdysseyView.prototype.getTileInfo = function () {

Missing param type at Scripts/View/OdysseyView.js :
   135 |    /**
   136 |     * Sets the overlay view component.
   137 |     * @param overlay the overlay view component.
----------------------^
   138 |     */
   139 |    OdysseyView.prototype.setOverlay = function (overlay) {

Missing type in @returns statement at Scripts/View/OdysseyView.js :
   144 |    /**
   145 |     * Gets the overlay view component.
   146 |     * @returns the overlay view component.
---------------^
   147 |     */
   148 |    OdysseyView.prototype.getOverlay = function () {

Empty block found at Scripts/View/OdysseyView.js :
   173 |        if (this.minimap !== null) {
   174 |            //this.minimap.update(this.model, this);
   175 |        }
-----------------^
   176 |        if (this.worldMap !== null) {
   177 |            this.worldMap.update(this.model, this);

Missing line feed at file end at Scripts/View/OdysseyViewAttributor.js :
    22 |
    23 |    return OdysseyViewAttributor;
    24 |}());
-------------^


226 code style errors found.
